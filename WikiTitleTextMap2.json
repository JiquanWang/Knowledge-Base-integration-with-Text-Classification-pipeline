{"Software engineering": "software engineer programming wikimedia foundation software engineering study application engineering design development maintenance software typical formal definitions software engineering research design develop test operating systems level software compilers network distribution software medical industrial military communications aerospace business scientific general computing applications systematic application scientific technological knowledge methods experience design implementation testing documentation software application systematic disciplined quantifiable approach development operation maintenance software engineering discipline concerned aspects software production establishment use sound engineering principles order economically obtain software reliable works efficiently real machines history margaret hamilton adopted oettinger term software engineering standing data results simulation code team designed apollo digital computers appeared early instructions operate wired machine practitioners quickly realized design flexible came stored program architecture von neumann architecture division hardware software began abstraction deal complexity computing programming languages started appear major step abstraction major languages fortran algol cobol released late deal scientific algorithmic business problems respectively dijkstra wrote seminal paper statement considered harmful david parnas introduced key concept modularity information hiding help programmers deal increasing complexity software systems term software engineering coined anthony oettinger margaret hamilton title world conference software engineering sponsored facilitated nato conference attended international experts software agreed defining best practices software grounded application engineering result conference report defines software developed software engineering foundations original report publicly available discipline software engineering created address poor quality software projects exceeding time budget control ensure software built systematically rigorously measurably time budget specification engineering addresses issues principles engineering applied software widespread lack best practices software time perceived software crisis barry boehm documented key advances field book software engineering economics include constructive cost model cocomo relates software development effort program man years source lines code sloc book analyzes software projects concludes cost fixing errors escalates project moves field use book asserts key driver software cost capability software development team software engineering institute sei established federally funded research development center headquartered campus carnegie mellon university pittsburgh pennsylvania united states watts humphrey founded sei software process program aimed understanding managing software engineering process book managing software process asserts software development process controlled measured improved process maturity levels introduced capability maturity model integration development cmmi dev defined government evaluates abilities software development team modern generally accepted best practices software engineering collected iso iec jtc sc subcommittee published software engineering body knowledge swebok subdisciplines software engineering divided subdisciplines requirements engineering elicitation analysis specification validation requirements software software design process defining architecture components interfaces characteristics component defined result process software construction detailed creation working meaningful software combination coding verification unit testing integration testing debugging software testing empirical technical investigation conducted provide stakeholders information quality product service test software maintenance totality activities required provide cost effective support software software configuration management identification configuration distinct points time purpose systematically controlling changes configuration maintaining integrity traceability configuration life cycle software engineering management application management activities planning coordinating measuring monitoring controlling reporting ensure development maintenance software systematic disciplined quantified software engineering process definition implementation assessment measurement management change improvement software life cycle process software engineering tools methods based tools intended assist software life cycle processes aided software engineering methods impose structure software engineering activity goal making activity systematic ultimately likely successful software quality management degree set inherent characteristics fulfills requirements software evolution process developing software initially repeatedly updating reasons education knowledge programming prerequisite software engineer ieee society produced swebok published iso iec technical report describing body knowledge recommend mastered graduate software engineer years experience software engineers enter profession obtaining university degree training vocational school standard international curriculum undergraduate software engineering degrees defined ccse updated number universities software engineering degree programs campus programs online programs masters level programs doctorate level programs certificate level programs united states practitioners wish proficient recognized professional software engineers ieee offers certifications extend knowledge level achieved academic degree certified software development associate certified software development professional addition university education companies sponsor internships students wishing pursue careers information technology internships introduce student interesting real world tasks typical software engineers encounter day similar experience gained military service software engineering profession legal requirements licensing certification professional software engineers vary world uk british society licenses software engineers members society chartered engineers ceng areas canada alberta british columbia ontario quebec software engineers hold professional engineer eng designation information systems professional designation canada legal requirement eng wants use title engineer practice software engineering united states starting offers ncees professional engineer exam software engineering allowing software engineers licensed recognized mandatory licensing currently largely debated perceived controversial parts texas use term engineer regulated law reserved use individuals professional engineer license ieee informs professional engineer license required individual work public health risk engineer fully qualified required standards particular state professional engineer licenses specific state awarded regularly retaken ieee society acm main based professional organizations software engineering publish guides profession software engineering ieee guide software engineering body knowledge version swebok defines field describes knowledge ieee expects practicing software engineer current swebok updated version released ieee promulgates software engineering code ethics employment bureau labor statistics counted software engineers holding jobs time period million practitioners employed engineering disciplines combined relative newness field study formal education software engineering taught science curriculum software engineers hold science degrees engineering background whatsoever software engineers work employees contractors software engineers work businesses government agencies civilian military non profit organizations software engineers work freelancers organizations specialists perform tasks software development process organizations require software engineers large projects people specialize role small projects people roles time specializations include industry analysts architects developers testers technical support middleware analysts managers academia educators researchers software engineers programmers work hours week percent software engineers percent programmers worked hours week injuries occupations rare like workers spend long periods terminal typing keyboard engineers programmers susceptible eyestrain discomfort hand wrist problems carpal tunnel syndrome field future looks bright according money magazine salary com rated software engineer best job united states software engineering ranked best job united states time careercast com certification software engineering institute offers certifications specific topics like security process improvement software architecture apple ibm microsoft companies sponsor certification examinations certification programs oriented specific technologies managed vendors technologies certification programs tailored institutions employ people use technologies broader certification general software engineering skills available professional societies ieee certified software professionals certified software development professional csdp added entry level certification known certified software development associate csda acm professional certification program early discontinued lack acm examined possibility professional certification software engineers late eventually decided certification inappropriate professional industrial practice software engineering british society developed legally recognized professional certification called chartered professional citp available fully qualified members mbcs software engineers eligible membership institution engineering technology qualify chartered engineer status canada canadian information processing society developed legally recognized professional certification called information systems professional isp ontario canada software engineers graduate canadian engineering accreditation board ceab accredited program successfully complete peo professional engineers ontario professional practice examination ppe months acceptable engineering experience eligible licensed professional engineers ontario professional engineers eng peo recognize online distance education consider science programs equivalent software engineering programs despite tremendous overlap sparked controversy certification war held number eng holders profession exceptionally low vast majority working professionals field hold degree cs se given difficult certification path holders non se degrees bother pursue license impact globalization initial impact outsourcing relatively lower cost international human resources developing world countries led massive migration software development activities corporations north america europe india later china russia developing countries approach flaws mainly distance timezone difference prevented human interaction clients developers massive job transfer negative impact aspects software engineering profession example students developed world avoid education related software engineering fear offshore outsourcing importing software products services countries displaced foreign visa workers statistics currently threat software engineering related career programming appear affected ability smartly leverage offshore near shore resources follow sun workflow improved overall operational capability organizations north americans leaving work asians arriving work asians leaving work europeans arriving work provides continuous ability human oversight business critical processes hours day paying overtime compensation disrupting key human resource sleep patterns global outsourcing advantages global generally distributed development run difficulties resulting distance developers key elements type distance identified geographical temporal cultural communication includes use different languages dialects english different locations research carried area global software development years extensive body relevant work published highlights benefits problems associated complex activity aspects software engineering research ongoing related areas related fields software engineering direct sub field engineering overlap science management science considered overall systems engineering controversy definition typical formal definitions software engineering application systematic disciplined quantifiable approach development operation maintenance software engineering discipline concerned aspects software production establishment use sound engineering principles order economically obtain software reliable works efficiently real machines term formally informal contemporary term broad range activities called programming systems analysis broad term aspects practice programming opposed theory programming called science term embodying advocacy specific approach programming urges treated engineering discipline art craft advocates codification recommended practices criticism software engineering sees practitioners individuals follow defined engineering approaches problem solving approaches specified software engineering books research papers connotations predictability precision mitigated risk professionalism perspective led calls licensing certification codified bodies knowledge mechanisms spreading engineering knowledge maturing field software craftsmanship proposed body software developers alternative emphasizes coding skills accountability software developers professionalism prescribed curriculum leading ad hoc problem solving craftmanship engineering lack predictability precision missing risk mitigation methods informal poorly defined software craftsmanship manifesto extends agile software manifesto draws metaphor modern software development apprenticeship model medieval europe software engineering extends engineering draws engineering model engineering process engineering project management engineering requirements engineering design engineering construction engineering validation concept new rarely understood widely misinterpreted including software engineering textbooks papers communities programmers crafters core issues software engineering approaches empirical real world validation approaches usually absent limited software engineering misinterpreted feasible theoretical environment dijkstra developed languages century refuted concepts software engineering prevalent thirty years ago arguing terms poor analogies called radical novelty science bachelor science information technology bachelor software engineering list software engineering conferences list software engineering publications software craftsmanship software engineering institute notes references reading external links guide software engineering body knowledge open systems engineering software development life cycle framework opensdlc org integrated creative commons sdlc software engineering institute carnegie mellon learn software engineering software engineering society", "Distributed and parallel computing": "distributed computing field science studies distributed systems distributed software components located networked computers communicate coordinate actions passing messages components interact order achieve common goal significant characteristics distributed systems concurrency components lack global clock independent failure components examples distributed systems vary soa based systems massively multiplayer online games peer peer applications program runs distributed called distributed program distributed programming process writing programs alternatives message passing mechanism including rpc like connectors message queues goal challenge pursued scientists practitioners distributed systems location transparency goal fallen favour industry distributed systems different conventional non distributed systems differences network partitions partial failures partial upgrades simply papered attempts transparency cap theorem distributed computing refers use distributed systems solve computational problems distributed computing problem divided tasks solved computers communicate message passing introduction word distributed terms distributed distributed programming distributed algorithm originally referred networks individual computers physically distributed geographical area terms nowadays wider sense referring autonomous processes run physical interact message passing single definition distributed following defining properties commonly autonomous computational entities local memory entities communicate message passing article computational entities called computers nodes distributed common goal solving large computational problem alternatively user individual needs purpose distributed coordinate use shared resources provide communication services users typical properties distributed systems include following tolerate failures individual computers structure network topology network latency number computers known advance consist different kinds computers network links change execution distributed program limited incomplete view know input distributed parallel architecture client server client server architecture way provide service central source single server provides service clients communicate server consume products architecture clients servers different jobs server job respond service requests clients client job use data provided response order perform tasks peer peer term peer peer distributed systems labour divided components computers send receive data contribute processing power memory distributed computation distributed increases size capacity computational resources increases parallel distributed computing distributed systems groups networked computers goal work terms concurrent computing parallel computing distributed computing lot overlap clear distinction exists characterized parallel distributed processors typical distributed run concurrently parallel parallel computing seen particular tightly coupled form distributed computing distributed computing seen loosely coupled form parallel computing possible roughly classify concurrent systems parallel distributed following criteria parallel computing processors access shared memory exchange information processors distributed computing processor private memory distributed memory information exchanged passing messages processors figure right illustrates difference distributed parallel systems figure schematic view typical distributed usual represented network topology node line connecting nodes communication link figure shows distributed local memory information exchanged passing messages node available communication links figure shows parallel processor direct access shared memory situation complicated traditional uses terms parallel distributed algorithm match definitions parallel distributed systems section theoretical foundations detailed discussion rule thumb high performance parallel computation shared memory multiprocessor uses parallel algorithms coordination large scale distributed uses distributed algorithms history use concurrent processes communicate message passing roots operating architectures studied widespread distributed systems local area networks ethernet invented arpanet predecessor internet introduced late arpanet mail invented early mail successful application arpanet probably earliest example large scale distributed application addition arpanet successor internet early worldwide networks included usenet fidonet support distributed discussion systems study distributed computing branch science late early conference field symposium principles distributed computing podc dates european counterpart international symposium distributed computing disc held applications reasons distributed systems distributed computing include nature application require use communication network connects computers example data produced physical location required location cases use single possible principle use distributed beneficial practical reasons example cost efficient obtain desired level performance cluster low end computers comparison single high end distributed provide reliability non distributed single point failure distributed easier expand manage monolithic uniprocessor ghaemi et al define distributed query query selects data databases located multiple sites network offer sql example select ename dname company emp company dept sales goods deptno deptno examples examples distributed systems applications distributed computing include following networks telephone networks cellular networks networks internet wireless sensor networks routing algorithms network applications world wide web peer peer networks massively multiplayer online games virtual reality communities distributed databases distributed database management systems network file systems distributed information processing systems banking systems airline reservation systems real time process control aircraft control systems industrial control systems parallel computation scientific computing including cluster computing grid computing volunteer computing projects list distributed computing projects distributed rendering graphics theoretical foundations models tasks like automate question answer type like ask question produce answer theoretical science tasks called computational problems formally computational problem consists instances solution instance instances questions ask solutions desired answers questions theoretical science seeks understand computational problems solved computability theory efficiently computational complexity theory traditionally said problem solved design algorithm produces correct solution given instance algorithm implemented program runs general purpose program reads problem instance input performs computation produces solution output formalisms random access machines universal turing machines abstract models sequential general purpose executing algorithm field concurrent distributed computing studies similar questions case multiple computers executes network interacting processes computational problems solved network efficiently obvious meant solving problem case concurrent distributed example task algorithm designer concurrent distributed equivalent sequential general purpose discussion focuses case multiple computers issues concurrent processes running single viewpoints commonly parallel algorithms shared memory model processors access shared memory algorithm designer chooses program executed processor theoretical model parallel random access machines pram classical pram model assumes synchronous access shared memory shared memory programs extended distributed systems underlying operating encapsulates communication nodes virtually unifies memory individual systems model closer behavior real world multiprocessor machines takes account use machine instructions compare swap cas asynchronous shared memory wide body work model summary literature parallel algorithms message passing model algorithm designer chooses structure network program executed models boolean circuits sorting networks boolean circuit seen network gate runs extremely simple program similarly sorting network seen network comparator distributed algorithms message passing model algorithm designer chooses program computers run program work correctly regardless structure network commonly model graph finite state machine node case distributed algorithms computational problems typically related graphs graph describes structure network problem instance illustrated following example example consider computational problem finding coloring given graph different fields following approaches centralized algorithms graph encoded string string given input program finds coloring graph encodes coloring string outputs result parallel algorithms graph encoded string multiple computers access string parallel focus graph produce coloring main focus high performance computation exploits processing power multiple computers parallel distributed algorithms graph structure network node communication link edge initially knows immediate neighbors graph computers exchange messages discover structure produce color output main focus coordinating operation arbitrary distributed field parallel algorithms different focus field distributed algorithms lot interaction fields example cole vishkin algorithm graph coloring originally presented parallel algorithm technique directly distributed algorithm parallel algorithm implemented parallel shared memory distributed message passing traditional boundary parallel distributed algorithms choose suitable network vs run given network lie place boundary parallel distributed systems shared memory vs message passing complexity measures parallel algorithms resource addition time space number computers trade running time number computers problem solved faster computers running parallel speedup decision problem solved polylogarithmic time polynomial number processors problem said class nc class nc defined equally pram formalism boolean circuits pram machines simulate boolean circuits efficiently vice versa analysis distributed algorithms attention usually paid communication operations computational steps simplest model distributed computing synchronous nodes operate lockstep fashion communication round nodes parallel receive latest messages neighbours perform arbitrary local computation send new messages neighbours systems central complexity measure number synchronous communication rounds required complete task complexity measure closely related diameter network let diameter network hand computable problem solved trivially synchronous distributed approximately communication rounds simply gather information location rounds solve problem inform node solution rounds hand running time algorithm smaller communication rounds nodes network produce output having possibility obtain information distant parts network words nodes globally consistent decisions based information available local neighbourhood distributed algorithms known running time smaller rounds understanding problems solved algorithms central research questions field commonly measures total number bits transmitted network cf communication complexity problems traditional computational problems perspective ask question distributed processes question produces answer stops problems want stop examples problems include dining philosophers problem similar mutual exclusion problems problems distributed supposed continuously coordinate use shared resources conflicts deadlocks occur fundamental challenges unique distributed computing example challenges related fault tolerance examples related problems include consensus problems byzantine fault tolerance self stabilisation lot research focused understanding asynchronous nature distributed systems synchronizers run synchronous algorithms asynchronous systems logical clocks provide causal happened ordering events clock synchronization algorithms provide globally consistent physical time stamps properties distributed systems far focus designing distributed solves given problem complementary research problem studying properties given distributed halting problem analogous example field centralised computation given program task decide halts runs forever halting problem undecidable general case naturally understanding behaviour network hard understanding behaviour interesting special cases decidable particular possible reason behaviour network finite state machines example telling given network interacting asynchronous non deterministic finite state machines reach deadlock problem pspace complete decidable likely efficient centralised parallel distributed algorithm solves problem case large networks coordinator election coordinator election called leader election process designating single process organizer task distributed computers nodes task begun network nodes unaware node serve coordinator leader task unable communicate current coordinator coordinator election algorithm run node network recognizes particular unique node task coordinator network nodes communicate order decide coordinator state need method order break symmetry example node unique comparable identities nodes compare identities decide node highest identity coordinator definition problem attributed lelann formalized method create new token token ring network token lost coordinator election algorithms designed economical terms total bytes transmitted time algorithm suggested gallager humblet spira general undirected graphs strong impact design distributed algorithms general won dijkstra prize influential paper distributed computing algorithms suggested different kind network graphs undirected rings unidirectional rings complete graphs grids directed euler graphs general method decouples issue graph family design coordinator election algorithm suggested korach kutten moran order perform coordination distributed systems employ concept coordinators coordinator election problem choose process group processes different processors distributed act central coordinator central coordinator election algorithms exist bully algorithm bully algorithm process sends message current coordinator response given time limit process tries elect leader chang roberts algorithm chang roberts algorithm ring algorithm ring based election algorithm process largest unique identification number architectures hardware software architectures distributed computing lower level necessary interconnect multiple cpus sort network regardless network printed circuit board loosely coupled devices cables higher level necessary interconnect processes running cpus sort communication distributed programming typically falls basic architectures categories client server tier architecture tier architecture distributed objects loose coupling tight coupling client server smart client code contacts server data formats displays user input client committed server represents permanent change tier architecture tier systems client intelligence middle tier stateless clients simplifies application deployment web applications tier tier architecture tier refers typically web applications forward requests enterprise services type application responsible success application servers highly coupled clustered refers typically cluster machines closely work running shared process parallel task subdivided parts individually final result peer peer architecture special machine machines provide service manage network resources instead uniformly divided machines known peers peers serve clients servers space based refers infrastructure creates illusion virtualization single address space data transparently replicated according application needs decoupling time space reference achieved basic aspect distributed computing architecture method communicating coordinating work concurrent processes message passing protocols processes communicate directly typically master slave relationship alternatively database centric architecture enable distributed computing form direct inter process communication utilizing shared database appscale boinc code mobility decentralized computing distributed algorithmic mechanism design distributed cache distributed operating edsger dijkstra prize distributed computing folding home inferno jungle computing layered queueing network library oriented architecture loa list distributed computing conferences list important publications concurrent parallel distributed computing parallel distributed processing parallel programming model plan bell labs notes references books articles web sites reading books isbn isbn java distributed computing jim faber isbn articles conference papers rodr\u00edguez villagra bar\u00e1n bionetics pp external links", "Databases": "database organized collection data collection schemes tables queries reports views objects data typically organized model aspects reality way supports processes requiring information modelling availability rooms hotels way supports finding hotel vacancies database management dbms software application interacts user applications database capture analyze data general purpose dbms designed allow definition creation querying update administration databases known dbmss include mysql postgresql microsoft sql server oracle sybase ibm db database generally portable different dbmss different dbms interoperate standards sql odbc jdbc allow single application work dbms database management systems classified according database model support popular database systems supported relational model represented sql language dbms loosely referred database terminology overview formally database refers set related data way organized access data usually provided database management dbms consisting integrated set software allows users interact databases provides access data contained database restrictions exist limit access particular data dbms provides functions allow entry storage retrieval large quantities information provides ways manage information organized close relationship term database casually refer database dbms manipulate outside world professional information technology term database refer collection related data spreadsheet card index article concerned databases size usage requirements necessitate use database management existing dbmss provide functions allow management database data classified main functional groups data definition creation modification removal definitions define organization data update insertion modification deletion actual data retrieval providing information form directly usable processing applications retrieved data available form basically stored database new form obtained altering combining existing data database administration registering monitoring users enforcing data security monitoring performance maintaining data integrity dealing concurrency control recovering information corrupted event unexpected failure database dbms conform principles particular database model database refers collectively database model database management database physically database servers dedicated computers hold actual databases run dbms related software database servers usually multiprocessor computers generous memory raid disk arrays stable storage raid recovery data disks fail hardware database accelerators connected servers high speed channel large volume transaction processing environments dbmss heart database applications dbmss built custom multitasking kernel built networking support modern dbmss typically rely standard operating provide functions dbmss comprise significant economical market storage vendors account dbms requirements development plans databases dbmss categorized according database model support relational xml type run server cluster mobile phone query language access database sql xquery internal engineering affects performance scalability resilience security applications databases support internal operations organizations underpin online interactions customers suppliers enterprise software databases hold administrative information specialized data engineering data economic models examples database applications include computerized library systems flight reservation systems computerized parts inventory systems application areas dbms banking customer information accounts loans banking transactions airlines reservations schedule information airlines use databases geographically distributed manner terminals situated world accessed central database phone lines data networks universities student information course registrations grades credit card transactions purchases credit cards generation monthly statements keeping records calls generating monthly bills maintaining balances prepaid calling cards storing information communication networks finance storing information holdings sales purchases financial instruments stocks bonds sales customer product purchase information manufacturing management supply chain tracking production items factories inventories items warehouses stores orders items human resources information employees salaries payroll taxes benefits generation paychecks general purpose special purpose dbmss dbms evolved complex software development typically requires thousands person years development effort general purpose dbmss adabas oracle db undergoing upgrades general purpose dbmss aim meet needs applications possible adds complexity fact development cost spread large number users means cost effective approach general purpose dbms optimal solution cases general purpose dbms introduce unnecessary overhead examples systems use special purpose databases common example email performs functions general purpose dbms insertion deletion messages composed items data associating messages particular email address functions limited required handle email provide user functionality available general purpose dbms databases application software accesses database behalf end users exposing dbms interface directly application programmers use wire protocol directly likely application programming interface database designers database administrators interact dbms dedicated interfaces build maintain applications databases need knowledge understanding dbmss operate dbmss external interfaces tuning parameters history following technology progress areas processors memory storage networks sizes capabilities performance databases respective dbmss grown orders magnitude development database technology divided eras based data model structure navigational sql relational post relational main early navigational data models hierarchical model epitomized ibm ims codasyl model network model implemented number products idms relational model proposed edgar codd departed tradition insisting applications search data content following links relational model employs sets ledger style tables different type entity mid computing hardware powerful allow wide deployment relational systems dbmss plus applications early relational systems dominated large scale data processing applications remain dominant ibm db oracle mysql microsoft sql server dbms dominant database language standardised sql relational model influenced database languages data models object databases developed overcome inconvenience object relational impedance mismatch led coining term post relational development hybrid object relational databases generation post relational databases late known nosql databases introducing fast key value stores document oriented databases competing generation known newsql databases attempted new implementations retained relational sql model aiming match high performance nosql compared commercially available relational dbmss navigational dbms basic structure navigational codasyl database model introduction term database coincided availability direct access storage disks drums mid onwards term represented contrast tape based systems past allowing shared interactive use daily batch processing oxford english dictionary cites report development corporation california use term data base specific technical sense computers grew speed capability number general purpose database systems emerged mid number systems come commercial use standard began grow charles bachman author product integrated data store ids founded database task group codasyl group responsible creation standardization cobol database task group delivered standard generally known codasyl approach soon number commercial products based approach entered market codasyl approach relied manual navigation linked data set formed large network applications records methods use primary key known calc key typically implemented hashing navigating relationships called sets record scanning records sequential order later systems added trees provide alternate access paths codasyl databases added straightforward query language final tally codasyl complex required significant training effort produce useful applications ibm dbms known information management ims ims development software written apollo program ims generally similar concept codasyl strict hierarchy model data navigation instead codasyl network model concepts later known navigational databases way data accessed bachman turing award presentation programmer navigator ims classified hierarchical database idms cincom systems total database classified network databases ims remains use relational dbms edgar codd worked ibm san jose california offshoot offices primarily involved development hard disk systems unhappy navigational model codasyl approach notably lack search facility wrote number papers outlined new approach database construction eventually culminated groundbreaking relational model data large shared data banks paper described new storing working large databases instead records stored sort linked list free form records codasyl codd idea use table fixed length records table different type entity linked list inefficient storing sparse databases data record left relational model solved splitting data series normalized tables relations optional elements moved main table room needed data freely inserted deleted edited tables dbms maintenance needed present table view application user relational model records linked virtual keys stored database defined needed data contained records relational model allowed content database evolve constant rewriting links pointers relational comes entities referencing entities known relationship like traditional hierarchical model relationship like navigational network model relational model express hierarchical navigational models native tabular model allowing pure combined modeling terms models application requires instance common use database track information users login information addresses phone numbers navigational approach data placed single record unused items simply placed database relational approach data normalized user table address table phone number table instance records created optional tables address phone numbers actually provided linking information key relational model bit information key uniquely defining particular record information collected user information stored optional tables searching key instance login user unique addresses phone numbers user recorded login key simple linking related data single collection traditional languages designed navigational approach require programs loop order collect records relational approach require loops collect information record codd solution necessary looping set oriented language suggestion later spawn ubiquitous sql branch mathematics known tuple calculus demonstrated support operations normal databases inserting updating providing simple finding returning sets data single operation codd paper picked people berkeley eugene wong michael stonebraker started project known ingres funding allocated geographical database project student programmers produce code beginning ingres delivered test products generally ready widespread use ingres similar number ways including use language data access known quel time ingres moved emerging sql standard ibm test implementation relational model prtv production business discontinued honeywell wrote mrds multics new implementations alphora dataphor rel dbms implementations usually called relational actually sql dbmss university michigan began development micro information management based childs set theoretic data model micro manage large data sets department labor environmental protection agency researchers university alberta university michigan wayne state university ran ibm mainframe computers michigan terminal remained production integrated approach attempts build database systems integrated hardware software underlying philosophy integration provide higher performance lower cost examples ibm early offering teradata britton lee database machine approach hardware support database management icl cafs accelerator hardware disk controller programmable search capabilities long term efforts generally unsuccessful specialized database machines pace rapid development progress general purpose computers database systems nowadays software systems running general purpose hardware general purpose data storage idea pursued certain applications companies like netezza oracle exadata late sql dbms ibm started working prototype loosely based codd concepts early version ready work started multi table systems data split data record optional stored single large chunk subsequent multi user versions tested customers time standardized query language sql added codd ideas establishing workable superior codasyl pushing ibm develop true production version known sql ds later database db larry ellison oracle started different chain based ibm papers beat ibm market version released stonebraker went apply lessons ingres develop new database postgres known postgresql postgresql global mission critical applications org info domain registries use primary data store large companies financial institutions sweden codd paper read mimer sql developed mid uppsala university project consolidated independent enterprise early mimer introduced transaction handling high robustness applications idea subsequently implemented dbmss data model entity relationship model emerged gained popularity database design emphasized familiar description earlier relational model later entity relationship constructs retrofitted data modeling construct relational model difference irrelevant desktop ushered age desktop computing new computers empowered users spreadsheets like lotus database software like dbase dbase product lightweight easy user understand box wayne ratliff creator dbase stated dbase different programs like basic fortran cobol lot dirty work data manipulation dbase instead user user concentrate having mess dirty details opening reading closing files managing space allocation dbase selling software titles early object oriented rise object oriented programming saw growth data databases handled programmers designers began treat data databases objects person data database person attributes address phone number age considered belong person instead extraneous data allows relations data relations objects attributes individual fields term object relational impedance mismatch described inconvenience translating programmed objects database tables object databases object relational databases attempt solve problem providing object oriented language extensions sql programmers use alternative purely relational sql programming libraries known object relational mappings orms attempt solve problem nosql newsql generation post relational databases known nosql databases including fast key value stores document oriented databases xml databases type structured document oriented database allows querying based xml document attributes xml databases enterprise database management xml machine machine data standard xml database management systems include commercial software marklogic oracle berkeley db xml free use software clusterpoint distributed xml json database enterprise software database platforms support industry standard acid compliant transaction processing strong database consistency characteristics high level database security nosql databases fast require fixed table schemas avoid join operations storing denormalized data designed scale horizontally popular nosql systems include mongodb couchbase riak memcached redis couchdb hazelcast apache cassandra hbase open source software products recent years high demand massively distributed databases high partition tolerance according cap theorem impossible distributed simultaneously provide consistency availability partition tolerance guarantees distributed satisfy guarantees time reason nosql databases called eventual consistency provide availability partition tolerance guarantees reduced level data consistency newsql class modern relational databases aims provide scalable performance nosql systems online transaction processing read write workloads sql maintaining acid guarantees traditional database databases include scalebase clustrix enterprisedb memsql nuodb voltdb research database technology active research topic academia research development groups companies example ibm research research activity includes theory development prototypes notable research topics included models atomic transaction concept related concurrency control techniques query languages query optimization methods raid database research area dedicated academic journals example acm transactions database systems tods data knowledge engineering dke annual conferences acm sigmod acm pods vldb ieee icde examples way classify databases involves type contents example bibliographic document text statistical multimedia objects way application area example accounting music compositions movies banking manufacturing insurance way technical aspect database structure interface type section lists adjectives characterize different kinds databases memory database database primarily resides main memory typically backed non volatile data storage main memory databases faster disk databases response time critical network equipment sap hana platform hot topic memory database hana able run servers tb main memory powered ibm founder company claimed big run largest sap customers active database includes event driven architecture respond conditions inside outside database possible uses include security monitoring alerting statistics gathering authorization databases provide active database features form database triggers cloud database relies cloud technology database dbms reside remotely cloud applications developed programmers later maintained utilized application end users web browser open apis data warehouses archive data operational databases external sources market research firms warehouse central source data use managers end users access operational data example sales data aggregated weekly totals converted internal product codes use upcs compared acnielsen data basic essential components data warehousing include extracting analyzing mining data transforming loading managing data available use deductive database combines logic programming relational database example datalog language distributed database data dbms span multiple computers document oriented database designed storing retrieving managing document oriented semi structured data information document oriented databases main categories nosql databases embedded database dbms tightly integrated application software requires access stored data way dbms hidden application end users requires little ongoing maintenance end user databases consist data developed individual end users examples collections documents spreadsheets presentations multimedia files products exist support databases simpler fledged dbmss elementary dbms functionality federated database comprises distinct databases dbms handled single database federated database management fdbms transparently integrates multiple autonomous dbmss possibly different types case heterogeneous database provides integrated conceptual view term multi database synonym federated database refer integrated fdbms managed integrated schema group databases cooperate single application case typically middleware distribution typically includes atomic commit protocol acp phase commit protocol allow distributed global transactions participating databases graph database kind nosql database uses graph structures nodes edges properties represent store information general graph databases store graph distinct specialized graph databases triplestores network databases array dbms kind nosql dbms allows model store retrieve usually large multi dimensional arrays satellite images climate simulation output hypertext hypermedia database word piece text representing object piece text article picture film hyperlinked object hypertext databases particularly useful organizing large amounts disparate information example useful organizing online encyclopedias users conveniently jump text world wide web large distributed hypertext database knowledge base abbreviated kb kb special kind database knowledge management providing means computerized collection organization retrieval knowledge collection data representing problems solutions related experiences mobile database carried synchronized mobile computing device operational databases store detailed data operations organization typically process relatively high volumes updates transactions examples include customer databases record contact credit demographic information business customers personnel databases hold information salary benefits skills data employees enterprise resource planning systems record details product components parts inventory financial databases track organization money accounting financial dealings parallel database seeks improve performance parallelization tasks loading data building indexes evaluating queries major parallel dbms architectures induced underlying hardware architecture shared memory architecture multiple processors share main memory space data storage shared disk architecture processing unit typically consisting multiple processors main memory units share storage shared architecture processing unit main memory storage probabilistic databases employ fuzzy logic draw inferences imprecise data real time databases process transactions fast result come acted right away spatial database store data features queries data include location based queries like closest hotel area temporal database built time aspects example temporal data model temporal version sql specifically temporal aspects usually include valid time transaction time terminology oriented database builds object oriented database customized specific field unstructured data database intended store manageable protected way diverse objects fit naturally conveniently common databases include email messages documents journals multimedia objects misleading objects highly structured entire possible object collection fit predefined structured framework established dbmss support unstructured data ways new dedicated dbmss emerging design modeling task database designer produce conceptual data model reflects structure information held database common approach develop entity relationship model aid drawing tools popular approach unified modeling language successful data model accurately reflect possible state external world modeled example people phone number allow information captured designing good conceptual data model requires good understanding application domain typically involves asking deep questions things organisation like customer supplier product sold different forms packaging product different products plane flies new york dubai frankfurt flight maybe answers questions establish definitions terminology entities customers products flights flight segments relationships attributes producing conceptual data model involves input business processes analysis workflow organization help establish information needed database left example help deciding database needs hold historic data current data having produced conceptual data model users happy stage translate schema implements relevant data structures database process called logical database design output logical data model expressed form schema conceptual data model theory independent choice database technology logical data model expressed terms particular database model supported chosen dbms terms data model database model interchangeably article use data model design specific database database model modelling notation express design popular database model general purpose databases relational model precisely relational model represented sql language process creating logical database design model uses methodical approach known normalization goal normalization ensure elementary fact recorded place insertions updates deletions automatically maintain consistency final stage database design decisions affect performance scalability recovery security like called physical database design key goal stage data independence meaning decisions performance optimization purposes invisible end users applications physical design driven mainly performance requirements requires good knowledge expected workload access patterns deep understanding features offered chosen dbms aspect physical database design security involves defining access control database objects defining security levels methods data models collage types database models database model type data model determines logical structure database fundamentally determines manner data stored organized manipulated popular example database model relational model sql approximation relational uses table based format common logical data models databases include navigational databases hierarchical database model network model graph database relational model entity relationship model enhanced entity relationship model object model document model entity attribute value model star schema object relational database combines related structures physical data models include inverted index flat file models include associative model model array model multivalue model specialized models optimized particular types data xml database semantic model content store event store time series model external conceptual internal views traditional view data database management provides views database data external level defines group end users sees organization data database single database number views external level conceptual level unifies external views compatible global view provides synthesis external views scope database end users database application developers database administrators internal level physical level internal organization data inside dbms implementation section concerned cost performance scalability operational matters deals storage layout data storage structures indexes enhance performance occasionally stores data individual views materialized views computed generic data performance justification exists redundancy balances external views performance requirements possibly conflicting attempt optimize overall performance activities typically conceptual logical physical internal view data number different external views allows users database information business related way technical processing viewpoint example financial department company needs payment details employees company expenses need details employees human resources department different departments need different views company database level database architecture relates concept data independence major initial driving forces relational model idea changes certain level affect view higher level example changes internal level affect application programs written conceptual level interfaces reduces impact making physical changes improve performance conceptual view provides level indirection internal external hand provides common view database independent different external view structures hand abstracts away details data stored managed internal level principle level external view presented different data model practice usually given dbms uses data model external conceptual levels relational model internal level hidden inside dbms depends implementation implementation section requires different level uses types data structure types separating external conceptual internal levels major feature relational database model implementations dominate st century databases languages database languages special purpose languages following data definition language defines data types relationships data manipulation language performs tasks inserting updating deleting data occurrences query language allows searching information computing derived information database languages specific particular data model notable examples include sql combines roles data definition data manipulation query single language commercial languages relational model departs respects relational model described codd example rows columns table ordered sql standard american national standards institute ansi international organization standardization iso standards regularly enhanced supported varying degrees conformance mainstream commercial relational dbmss oql object model language standard object data management group influenced design newer query languages like jdoql ejb ql xquery standard xml query language implemented xml database systems marklogic exist relational databases xml capability oracle db memory xml processors saxon sql xml combines xquery sql database language incorporate features like dbms specific configuration storage engine management computations modify query results like counting summing averaging sorting grouping cross referencing constraint enforcement automotive database allowing engine type car application programming interface version query language programmer convenience performance security availability critical importance database technology smooth running enterprise database systems include complex mechanisms deliver required performance security availability allow database administrators control use features storage database storage container physical materialization database comprises internal physical level database architecture contains information needed metadata data data internal data structures reconstruct conceptual level external level internal level needed putting data permanent storage generally responsibility database engine storage engine typically accessed dbms underlying operating utilizing operating systems file systems intermediates storage layout storage properties configuration setting extremely important efficient operation dbms closely maintained database administrators dbms operation database residing types storage memory external storage database data additional needed information possibly large amounts coded bits data typically reside storage structures look completely different way data look conceptual external levels ways attempt optimize best possible levels reconstruction needed users programs computing additional types needed information data querying database dbmss support specifying character encoding store data multiple encodings database low level database storage structures storage engine serialize data model written medium choice techniques indexing improve performance conventional storage row oriented column oriented correlation databases materialized views storage redundancy employed increase performance common example storing materialized views consist frequently needed external views query results storing views saves expensive computing time needed downsides materialized views overhead incurred updating synchronized original updated database data cost storage redundancy replication occasionally database employs storage redundancy database objects replication copies increase data availability improve performance simultaneous multiple end user accesses database object provide resiliency case partial failure distributed database updates replicated object need synchronized object copies cases entire database replicated security database security deals aspects protecting database content owners users ranges protection intentional unauthorized database uses unintentional database accesses unauthorized entities person program database access control deals controlling person certain program allowed access information database information comprise specific database objects record types specific records data structures certain computations certain objects query types specific queries utilizing specific access paths specific indexes data structures access information database access controls set special authorized database owner personnel uses dedicated protected security dbms interfaces managed directly individual basis assignment individuals privileges groups elaborate models assignment individuals groups roles granted entitlements data security prevents unauthorized users viewing updating database passwords users allowed access entire database subsets called subschemas example employee database contain data individual employee group users authorized view payroll data allowed access work history medical data dbms provides way interactively enter update database interrogate capability allows managing personal databases data security general deals protecting specific chunks data physically corruption destruction removal physical security interpretation parts meaningful information looking strings bits comprise concluding specific valid credit card numbers data encryption change access logging records accessed attributes changed changed logging services allow forensic database audit later keeping record access occurrences changes application level code record changes leaving database monitoring set attempt detect security breaches transactions concurrency database transactions introduce level fault tolerance data integrity recovery crash database transaction unit work typically encapsulating number operations database reading database object writing acquiring lock abstraction supported database systems transaction defined boundaries terms program code executions included transaction determined transaction programmer special transaction commands acronym acid describes ideal properties database transaction atomicity consistency isolation durability migration section database migration article data migration database built dbms portable dbms dbms run situations desirable migrate database dbms reasons primarily economical different dbmss different total costs ownership tcos functional operational different dbmss different capabilities migration involves database transformation dbms type transformation maintain possible database related application related application programs intact database conceptual external architectural levels maintained transformation desired aspects architecture internal level maintained complex large database migration complicated costly time project factored decision migrate spite fact tools exist help migration specific dbmss typically dbms vendor provides tools help importing databases popular dbmss building maintaining tuning designing database application stage building database typically appropriate general purpose dbms selected utilized purpose dbms provides needed user interfaces utilized database administrators define needed application data structures dbms respective data model user interfaces select needed dbms parameters like security related storage allocation parameters database ready data structures needed components defined typically populated initial application data database initialization typically distinct project cases specialized dbms interfaces support bulk insertion making operational cases database operational application data data accumulated operation database created initialised populated needs maintained database parameters need changing database need tuned tuning better performance application data structures changed added new related application programs written add application functionality backup restore desired bring database previous state reasons cases database corrupted software error updated erroneous data achieve backup operation occasionally continuously desired database state values data embedding database data structures kept dedicated backup files techniques exist effectively state needed decided database administrator bring database state specifying state desired point time database state files utilized restore state static analysis static analysis techniques software verification applied scenario query languages particular abstract interpretation framework extended field query languages relational databases way support sound approximation techniques semantics query languages tuned according suitable abstractions concrete domain data abstraction relational database interesting applications particular security purposes fine grained access control watermarking dbms features include database logs graphics component producing graphs charts especially data warehouse query optimizer performs query optimization query choose efficient query plan partial order tree operations executed compute query result specific particular storage engine tools hooks database design application programming application program maintenance database performance analysis monitoring database configuration monitoring dbms hardware configuration dbms related database span computers networks storage units related database mapping especially distributed dbms storage allocation database layout monitoring storage migration comparison database tools comparison object database management systems comparison object relational database management systems comparison relational database management systems data hierarchy data bank data store database theory database testing database centric architecture question focused dataset references reading ling liu tamer \u00f6zsu eds encyclopedia database systems illus isbn beynon davies database systems rd edition palgrave houndmills basingstoke connolly thomas carolyn begg database systems new york harlow gray reuter transaction processing concepts techniques st edition morgan kaufmann publishers kroenke david david auer database concepts rd ed new york prentice raghu ramakrishnan johannes gehrke database management systems abraham silberschatz henry korth sudarshan database concepts discussion database systems teorey lightstone nadeau database modeling design logical design th edition morgan kaufmann press isbn external links db file extension informations files db extension", "Hardware and architecture": "projected diagram nighthawk conducts live exercise bombing run gbu laser guided bombs engineering hardware architecture refers identification physical components description called hardware design model allows hardware designers understand components fit architecture provides software component designers important information needed software development integration clear definition hardware architecture allows traditional engineering disciplines electrical mechanical engineering work effectively develop manufacture new machines devices components hardware expression engineering industry explicitly distinguish electronic hardware software runs hardware automation software engineering disciplines need simply sort modern automobile runs vastly software apollo spacecraft modern aircraft function running tens millions instructions embedded distributed aircraft resident standard hardware specialized hardward components ic wired logic gates analog hybrid devices digital components need effectively model separate physical components combine form complex systems important wide range applications including computers personal digital assistants pdas cell phones surgical instrumentation satellites submarines hardware architecture representation engineered engineered electronic hardware process discipline effectively implementing design generally larger integrated encompassing information software device prototyping representation convey information related elements comprising hardware relationships elements rules governing relationships electric multi turn actuator controls process sequence steps prescribed produce change architecture design architecture hardware set constraints discipline body knowledge inform practitioners effective way design set constraints hardware architecture primarily concerned internal electrical rarely mechanical interfaces components subsystems interface external environment especially devices operated electronic displays viewed user special interface known human interface aka human interface hci called man machine interface integrated circuit ic designers driving current technologies innovative approaches new products multiple layers active devices proposed single chip opening opportunities disruptive microelectronic optoelectronic new hardware implementation background hardware architecture example integrated handheld medical device diabetes monitoring boat layout detailed equipment hardware specification functionality prior advent digital computers electronics engineering disciplines terms hardware commonly today arrival digital computers scene development software engineering separate discipline necessary distinguish engineered hardware artifacts software artifacts combined artifacts programmable hardware artifact machine lacks software program impotent software artifact program equally impotent alter sequential states suitable hardware machine hardware machine software program designed perform illimitable number abstract physical tasks software engineering disciplines engineering disciplines communications terms hardware software came distinguish hardware runs software program software hardware device complete program hardware engineer architect deals exclusively hardware device software engineer architect deals exclusively software program systems engineer systems architect responsible seeing software program capable properly running hardware device composed entities capable properly interacting external environment especially user performing intended function hardware architecture abstract representation electronic device capable running fixed changeable program hardware architecture generally includes form analog digital hybrid electronic electronic mechanical sensors actuators hardware design viewed partitioning scheme algorithm considers present foreseeable requirements arranges necessary hardware components workable set cleanly bounded subsystems parts required partitioning scheme exclusive inclusive exhaustive major purpose partitioning arrange elements hardware subsystems minimum electrical connections electronic communications needed software hardware good subsystem tends seen meaningful object clear allocation user requirements architecture hardware software provides effective basis validation tests user requirements built aided manufacturing cam electronic design automation eda elmer fem solver finite element analysis hardware architect integrated circuit ic chip soc large scale integration vlsi vhsic hardware description language vhdl technology cad tcad open cascade technology asic open source hardware references", "Networks and communications": "network data network network allows computers exchange data networks networked computing devices exchange data network links data connections connections nodes established cable media wireless media best known network internet network devices originate route terminate data called network nodes nodes include hosts personal computers phones servers networking hardware devices said networked device able exchange information device direct connection networks differ transmission media carry signals communications protocols organize network traffic network size topology organizational intent cases communications protocols layered work specific general communications protocols physical layer directly deals transmission media networks support applications access world wide web shared use application storage servers printers fax machines use email instant messaging applications history chronology significant network developments includes late early networks communicating computers included military radar semi automatic ground environment sage anatolii ivanovich kitov proposed central committee communist party soviet union detailed plan organisation control soviet armed forces soviet economy basis network computing centres commercial airline reservation semi automatic business research environment sabre went online connected mainframes licklider developed working group called intergalactic network precursor arpanet advanced research projects agency arpa researchers dartmouth college developed dartmouth time sharing distributed users large systems year massachusetts institute technology research group supported general electric bell labs route manage telephone connections leonard kleinrock paul baran donald davies independently developed network systems packets transfer information computers network thomas marill lawrence roberts created wide area network wan immediate precursor arpanet roberts program manager western electric introduced widely telephone switch implemented true control university california los angeles stanford research institute university california santa barbara university utah connected beginning arpanet network kbit circuits commercial services deployed later underlying infrastructure expanding tcp ip networks robert metcalfe wrote formal memo xerox parc describing ethernet networking based aloha network developed norman abramson colleagues university hawaii july robert metcalfe david boggs published paper ethernet distributed packet switching local networks collaborated patents received robert metcalfe pursued making ethernet open standard john murphy datapoint corporation created arcnet token passing network share storage devices transmission speed capacity ethernet increased mbit mbit ethernet supported transmission speeds gigabit ability ethernet scale easily quickly adapting support new fiber optic cable speeds contributing factor continued use properties networking considered branch electrical engineering science information technology engineering relies theoretical practical application related disciplines network facilitates interpersonal communications allowing people communicate efficiently easily email instant messaging chat rooms telephone video telephone calls video conferencing providing access information shared storage devices important feature networks network allows sharing files data types information giving authorized users ability access information stored computers network network allows sharing network computing resources users access use resources provided devices network printing document shared network printer distributed computing uses computing resources network accomplish tasks network crackers deploy viruses worms devices connected network prevent devices accessing network denial service attack network packet communication links support packets traditional point point links simply transmit data bit stream information networks carried packets network packet formatted unit data list bits bytes usually tens bytes kilobytes long carried packet switched network packet networks data formatted packets sent network destination packets arrive reassembled original message packets bandwidth transmission medium better shared users network circuit switched user sending packets link filled packets users cost shared relatively little interference provided link isn overused packets consist kinds data control information user data known payload control information provides data network needs deliver user data example source destination network addresses error detection codes sequencing information typically control information packet headers trailers payload data route packet needs network immediately available case packet queued waits link free network topology physical layout network usually important topology connects network nodes diagrams physical network topological geographic symbols diagrams usually denote network links network nodes network links transmission media referred literature physical media link devices form network include electrical cable ethernet homepna power line communication hn optical fiber fiber optic communication radio waves wireless networking osi model defined layers physical layer data link layer widely adopted family transmission media local area network lan technology collectively known ethernet media protocol standards enable communication networked devices ethernet defined ieee ethernet transmits data copper fiber cables wireless lan standards defined ieee use radio waves use infrared signals transmission medium power line communication uses building power cabling transmit data wired technologies fiber optic cables transmit light network node orders following wired technologies roughly slowest fastest transmission speed coaxial cable widely cable television systems office buildings work sites local area networks cables consist copper aluminum wire surrounded insulating layer typically flexible material high dielectric constant surrounded conductive layer insulation helps minimize interference distortion transmission speed ranges million bits second million bits second itu hn technology uses existing home wiring coaxial cable phone lines power lines create high speed gigabit local area network twisted pair wire widely medium twisted pair cabling consist copper wires twisted pairs ordinary telephone wires consist insulated copper wires twisted pairs network cabling wired ethernet defined ieee consists pairs copper cabling utilized voice data transmission use wires twisted helps reduce crosstalk electromagnetic induction transmission speed ranges million bits second billion bits second twisted pair cabling comes forms unshielded twisted pair utp shielded twisted pair stp form comes category ratings designed use scenarios map showing submarine optical fiber cables world optical fiber glass fiber carries pulses light represent data advantages optical fibers metal wires low transmission loss immunity electrical interference optical fibers simultaneously carry multiple wavelengths light greatly increases rate data sent helps enable data rates trillions bits second optic fibers long runs cable carrying high data rates undersea cables interconnect continents price main factor distinguishing wired wireless technology options business wireless options command price premium purchasing wired computers printers devices financial benefit making decision purchase hard wired technology products review restrictions limitations selections necessary business employee needs override cost considerations wireless technologies computers connected networks wireless links terrestrial microwave terrestrial microwave communication uses earth based transmitters receivers resembling satellite dishes terrestrial microwaves low gigahertz range limits communications line sight relay stations spaced approximately apart communications satellites satellites communicate microwave radio waves deflected earth atmosphere satellites stationed space typically geosynchronous orbit equator earth orbiting systems capable receiving relaying voice data tv signals cellular pcs systems use radio communications technologies systems divide region covered multiple geographic areas area low power transmitter radio relay antenna device relay calls area area radio spread spectrum technologies wireless local area networks use high frequency radio technology similar digital cellular low frequency radio technology wireless lans use spread spectrum technology enable communication multiple devices limited area ieee defines common flavor open standards wireless radio wave technology known wifi free space optical communication uses visible invisible light communications cases line sight propagation limits physical positioning communicating devices exotic technologies attempts transporting data exotic media ip avian carriers humorous april fool request comments issued rfc implemented real life extending internet interplanetary dimensions radio waves cases large round trip delay time gives slow way communication prevent sending large amounts information network nodes apart physical transmission medium networks comprise additional basic building blocks network interface controller nics repeaters hubs bridges switches routers modems firewalls network interfaces atm network interface form accessory card lot network interfaces built network interface controller nic hardware provides ability access transmission media ability process low level network information example nic connector accepting cable aerial wireless transmission reception associated circuitry nic responds traffic addressed network address nic ethernet networks network interface controller unique media access control mac address usually stored controller permanent memory avoid address conflicts network devices institute electrical electronics engineers ieee maintains administers mac address uniqueness size ethernet mac address octets significant octets reserved identify nic manufacturers manufacturers assigned prefixes uniquely assign significant octets ethernet interface produce repeaters hubs repeater electronic device receives network signal cleans unnecessary noise regenerates signal retransmitted higher power level obstruction signal cover longer distances degradation twisted pair ethernet configurations repeaters required cable runs longer meters fiber optics repeaters tens hundreds kilometers apart repeater multiple ports known hub repeaters work physical layer osi model repeaters require small time regenerate signal cause propagation delay affects network performance result network architectures limit number repeaters row ethernet rule hubs obsoleted modern switches repeaters long distance links notably undersea cabling bridges network bridge connects filters traffic network segments data link layer layer osi model form single network breaks network collision domain maintains unified broadcast domain network segmentation breaks large congested network aggregation smaller efficient networks bridges come basic types local bridges directly connect lans remote bridges create wide area network wan link lans remote bridges connecting link slower end networks largely replaced routers wireless bridges join lans connect remote devices lans switches network switch device forwards filters osi layer datagrams ports based mac addresses packets switch distinct hub forwards frames physical ports involved communication ports connected thought multi port bridge learns associate physical ports mac addresses examining source addresses received frames unknown destination targeted switch broadcasts ports source switches normally numerous ports facilitating star topology devices cascading additional switches multi layer switches capable routing based layer addressing additional logical levels term switch loosely include devices routers bridges devices distribute traffic based load based application content web url identifier routers typical home small office router showing adsl telephone line ethernet network cable connections router internetworking device forwards packets networks processing routing information included packet datagram internet protocol information layer routing information processed conjunction routing table forwarding table router uses routing table determine forward packets destination routing table include null interface known black hole interface data processing said data modems modems modulator demodulator connect network nodes wire originally designed digital network traffic wireless carrier signals modulated digital signal produce analog signal tailored required properties transmission modems commonly telephone lines digital subscriber line technology firewalls firewall network device controlling network security access rules firewalls typically configured reject access requests unrecognized sources allowing actions recognized ones vital role firewalls play network security grows parallel constant increase cyber attacks network structure network topology layout organizational hierarchy interconnected nodes network different network topologies affect throughput reliability critical technologies bus networks single failure cause network fail entirely general robust network expensive install common layouts common network topologies common layouts bus network nodes connected common medium medium layout original ethernet called base base star network nodes connected special central node typical layout wireless lan wireless client connects central wireless access point ring network node connected left right neighbour node nodes connected node reach node traversing nodes left rightwards fiber distributed data interface fddi use topology mesh network node connected arbitrary number neighbours way traversal node fully connected network node connected node network tree network nodes arranged hierarchically note physical layout nodes network necessarily reflect network topology example fddi network topology ring actually counter rotating rings physical topology star neighboring connections routed central physical location overlay network sample overlay network overlay network virtual network built network nodes overlay network connected virtual logical links link corresponds path physical links underlying network topology overlay network differ underlying example peer peer networks overlay networks organized nodes virtual links run internet overlay networks invention networking systems connected telephone lines modems data network existed striking example overlay network internet internet initially built overlay telephone network today internet node communicate virtually underlying mesh sub networks wildly different topologies technologies address resolution routing means allow mapping fully connected ip overlay network underlying network example overlay network distributed hash table maps keys nodes network case underlying network ip network overlay network table actually map indexed keys overlay networks proposed way improve internet routing quality service guarantees achieve higher quality streaming media previous proposals intserv diffserv ip multicast seen wide acceptance largely require modification routers network hand overlay network incrementally deployed end hosts running overlay protocol software cooperation internet service providers overlay network control packets routed underlying network overlay nodes control example sequence overlay nodes message traverses reaches destination example akamai technologies manages overlay network provides reliable efficient content delivery kind multicast academic research includes end multicast resilient routing quality service studies communications protocols tcp ip model internet layering scheme relation common protocols layered figure message flows presence router red flows effective communication paths black paths actual paths communications protocol set rules exchanging information network links protocol stack osi model protocol leverages services protocol important example protocol stack http world wide web protocol running tcp ip internet protocols ieee wi fi protocol stack wireless router home user personal user surfing web whilst use protocol layering today ubiquitous field networking historically criticized researchers principal reasons firstly abstracting protocol stack way cause higher layer duplicate functionality lower layer prime example error recovery link basis end end basis secondly common protocol implementation layer require data state addressing information present layer defeating point separating layers place example tcp uses ecn field ipv header indication congestion ip network layer protocol tcp transport layer protocol communication protocols characteristics connection oriented connectionless use circuit mode packet switching use hierarchical addressing flat addressing communication protocols described ieee complete ieee protocol suite provides diverse set networking capabilities protocols flat addressing scheme operate levels osi model example mac bridging ieee deals routing ethernet packets spanning tree protocol ieee describes vlans ieee defines port based network access control protocol forms basis authentication mechanisms vlans wlans home user sees user enter wireless access key ethernet ethernet simply called lan family protocols wired lans described set standards called ieee published institute electrical electronics engineers wireless lan wireless lan widely known wlan wifi probably known member ieee protocol family home users today standarized ieee shares properties wired ethernet internet protocol suite internet protocol suite called tcp ip foundation modern networking offers connection connection oriented services inherently unreliable network traversed data gram transmission internet protocol ip level core protocol suite defines addressing identification routing specifications internet protocol version ipv ipv generation protocol enlarged addressing capability sonet sdh synchronous optical networking sonet synchronous digital hierarchy sdh standardized multiplexing protocols transfer multiple digital bit streams optical fiber lasers originally designed transport circuit mode communications variety different sources primarily support real time uncompressed circuit switched voice encoded pcm pulse code modulation format protocol neutrality transport oriented features sonet sdh obvious choice transporting asynchronous transfer mode atm frames asynchronous transfer mode asynchronous transfer mode atm switching technique networks uses asynchronous time division multiplexing encodes data small fixed sized cells differs protocols internet protocol suite ethernet use variable sized packets frames atm similarity circuit packet switched networking makes good choice network handle traditional high throughput data traffic real time low latency content voice video atm uses connection oriented model virtual circuit established endpoints actual data exchange begins role atm diminishing favor generation networks plays role mile connection internet service provider home user geographic scale network characterized physical capacity organizational purpose use network including user authorization access rights differ accordingly nanoscale network nanoscale communication network key components implemented nanoscale including message carriers leverages physical principles differ macroscale communication mechanisms nanoscale communication extends communication small sensors actuators biological systems tends operate environments harsh classical communication personal area network personal area network pan network communication different information technological devices close person examples devices pan personal computers printers fax machines telephones pdas scanners video game consoles pan include wired wireless devices reach pan typically extends meters wired pan usually constructed usb firewire connections technologies bluetooth infrared communication typically form wireless pan local area network local area network lan network connects computers devices limited geographical area home school office building closely positioned group buildings device network node wired lans likely based ethernet technology newer standards itu hn provide way create wired lan existing wiring coaxial cables telephone lines power lines interconnected devices use network layer layer handle multiple subnets represented different colors inside library mbit ethernet connections user device gigabit ethernet connection central router called layer switches ethernet interfaces support internet protocol correct access routers router distribution router connects internet academic networks customer access routers defining characteristics lan contrast wide area network wan include higher data transfer rates limited geographic range lack reliance leased lines provide connectivity current ethernet ieee lan technologies operate data transfer rates gbit ieee investigates standardization gbit rates lan connected wan router home area network home area network han residential lan communication digital devices typically deployed home usually small number personal computers accessories printers mobile computing devices important function sharing internet access broadband service cable tv digital subscriber line dsl provider storage area network storage area network san dedicated network provides access consolidated block level data storage sans primarily storage devices disk arrays tape libraries optical jukeboxes accessible servers devices appear like locally attached devices operating san typically network storage devices generally accessible local area network devices cost complexity sans dropped early levels allowing wider adoption enterprise small medium sized business environments campus area network campus area network interconnection lans limited geographical area networking equipment switches routers transmission media optical fiber copper plant cat cabling entirely owned campus tenant owner enterprise university government example university campus network likely link variety campus buildings connect academic colleges departments library student residence halls backbone network backbone network network infrastructure provides path exchange information different lans sub networks backbone tie diverse networks building different buildings wide area example large company implement backbone network connect departments located world equipment ties departmental networks constitutes network backbone designing network backbone network performance network congestion critical factors account normally backbone network capacity greater individual networks connected example backbone network internet backbone set wide area networks wans core routers tie networks connected internet metropolitan area network metropolitan area network man large network usually spans city large campus wide area network wide area network wan network covers large geographic area city country spans distances wan uses communications channel combines types media telephone lines cables air waves wan makes use transmission facilities provided common carriers telephone companies wan technologies generally function lower layers osi reference model physical layer data link layer network layer enterprise private network enterprise private network network single organization builds interconnect office locations production sites head offices remote offices shops share resources virtual private network virtual private network vpn overlay network links nodes carried open connections virtual circuits larger network internet instead physical wires data link layer protocols virtual network said tunneled larger network case common application secure communications public internet vpn need explicit security features authentication content encryption vpns example separate traffic different user communities underlying network strong security features vpn best effort performance defined service level agreement sla vpn customer vpn service provider generally vpn topology complex point point global area network global area network gan network supporting mobile arbitrary number wireless lans satellite coverage areas key challenge mobile communications handing user communications local coverage area ieee project involves succession terrestrial wireless lans organizational scope networks typically managed organizations private enterprise networks use combination intranets extranets provide network access internet single owner permits virtually unlimited global connectivity intranets intranet set networks control single administrative entity intranet uses ip protocol ip based tools web browsers file transfer applications administrative entity limits use intranet authorized users commonly intranet internal lan organization large intranet typically web server provide users organizational information intranet router local area network extranet extranet network administrative control single organization supports limited connection specific external network example organization provide access aspects intranet share data business partners customers entities necessarily trusted security standpoint network connection extranet implemented wan technology internetwork internetwork connection multiple networks common routing technology routers internet file internet map jpg thumb right partial map internet based january data opte org line drawn nodes representing ip addresses length lines indicative delay nodes graph represents class networks reachable internet largest example internetwork global interconnected governmental academic corporate public private networks based networking technologies internet protocol suite successor advanced research projects agency network arpanet developed darpa united states department defense internet communications backbone underlying world wide web www participants internet use diverse array methods documented standardized protocols compatible internet protocol suite addressing ip addresses administered internet assigned numbers authority address registries service providers large enterprises exchange information reachability address spaces border gateway protocol bgp forming redundant worldwide mesh transmission paths darknet darknet overlay network typically running internet accessible specialized software darknet anonymizing network connections trusted peers called friends non standard protocols ports darknets distinct distributed peer peer networks sharing anonymous ip addresses publicly shared users communicate little fear governmental corporate interference routing routing calculates good paths network information example node node best routes likely thickest routes routing process selecting network paths carry network traffic routing performed kinds networks including circuit switching networks packet switched networks packet switched networks routing directs packet forwarding transit logically addressed network packets source ultimate destination intermediate nodes intermediate nodes typically network hardware devices routers bridges gateways firewalls switches general purpose computers forward packets perform routing specialized hardware suffer limited performance routing process usually directs forwarding basis routing tables maintain record routes network destinations constructing routing tables held router memory important efficient routing routing algorithms use network path time multipath routing techniques enable use multiple alternative paths usually multiple routes taken choose different elements considered decide routes installed routing table sorted priority prefix length longer subnet masks preferred independent routing protocol different routing protocol metric lower metric cost preferred valid routing protocol administrative distance lower distance preferred valid different routing protocols routing narrow sense term contrasted bridging assumption network addresses structured similar addresses imply proximity network structured addresses allow single routing table entry represent route group devices large networks structured addressing routing narrow sense outperforms unstructured addressing bridging routing dominant form addressing internet bridging widely localized environments network service network services applications hosted servers network provide functionality members users network help network operate world wide web mail printing network file sharing examples known network services network services dns domain names ip mac addresses people remember names like nm lan better numbers like dhcp ensure equipment network valid ip address services usually based service protocol defines format sequencing messages clients servers network service network performance quality service depending installation requirements network performance usually measured quality service product parameters affect typically include throughput jitter bit error rate latency following list gives examples network performance measures circuit switched network type packet switched network viz atm circuit switched networks circuit switched networks network performance synonymous grade service number rejected calls measure network performing heavy traffic loads types performance measures include level noise echo atm asynchronous transfer mode atm network performance measured line rate quality service qos data throughput connect time stability technology modulation technique modem enhancements ways measure performance network network different nature design performance modelled instead measured example state transition diagrams model queuing performance circuit switched network network planner uses diagrams analyze network performs state ensuring network optimally designed network congestion network congestion occurs link node carrying data quality service deteriorates typical effects include queueing delay packet loss blocking new connections consequence incremental increases offered load lead small increase network throughput actual reduction network throughput network protocols use aggressive retransmissions compensate packet loss tend systems state network congestion initial load reduced level normally induce network congestion networks protocols exhibit stable states level load stable state low throughput known congestive collapse modern networks use congestion control congestion avoidance techniques try avoid congestion collapse include exponential backoff protocols csma ca original ethernet window reduction tcp fair queueing devices routers method avoid negative effects network congestion implementing priority schemes packets transmitted higher priority priority schemes solve network congestion help alleviate effects congestion services example method avoid network congestion explicit allocation network resources specific flows example use contention free transmission opportunities cftxops itu hn standard provides high speed gbit local area networking existing home wires power lines phone lines coaxial cables internet rfc addresses subject congestion control network resilience network resilience ability provide maintain acceptable level service face faults challenges normal operation security network security network security consists provisions policies adopted network administrator prevent monitor unauthorized access misuse modification denial network network accessible resources network security authorization access data network controlled network administrator users assigned id password allows access information programs authority network security variety networks public private secure daily transactions communications businesses government agencies individuals network surveillance network surveillance monitoring data transferred networks internet monitoring surreptitiously behest governments corporations criminal organizations individuals legal require authorization court independent agency network surveillance programs widespread today internet traffic potentially monitored clues illegal activity surveillance useful governments law enforcement maintain social control recognize monitor threats prevent investigate criminal activity advent programs total information awareness program technologies high speed surveillance computers biometrics software laws communications assistance law enforcement act governments possess unprecedented ability monitor activities citizens civil rights privacy groups reporters borders electronic frontier foundation american civil liberties union expressed concern increasing surveillance citizens lead mass surveillance society limited political personal freedoms fears led numerous lawsuits hepting hacktivist group anonymous hacked government websites protest considers draconian surveillance end end encryption end end encryption ee digital communications paradigm uninterrupted protection data traveling communicating parties involves originating party encrypting data intended recipient decrypt dependency parties end end encryption prevents intermediaries internet providers application service providers discovering tampering communications end end encryption generally protects confidentiality integrity examples end end encryption include pgp email otr instant messaging zrtp telephony tetra radio typical server based communications systems include end end encryption systems guarantee protection communications clients servers communicating parties examples non ee systems google talk yahoo messenger facebook dropbox systems example lavabit secretink described offering end end encryption systems normally offer end end encryption turned contain door subverts negotiation encryption key communicating parties example skype hushmail end end encryption paradigm directly address risks communications endpoints technical exploitation clients poor quality random number generators key escrow ee address traffic analysis relates things identities end points times quantities messages sent views networks users network administrators typically different views networks users share printers servers workgroup usually means geographic location lan network administrator responsible network running community connection local area thought set arbitrarily located users share set servers possibly communicate peer peer technologies network administrators networks physical logical perspectives physical perspective involves geographic locations physical cabling network elements routers bridges application layer gateways interconnect transmission media logical networks called tcp ip architecture subnets map transmission media example common practice campus buildings set lan cables building appear common subnet virtual lan vlan technology users administrators aware varying extents trust scope characteristics network tcp ip architectural terminology intranet community private administration usually enterprise accessible authorized users employees intranets connected internet generally limited connection extranet extension intranet allows secure communications users outside intranet business partners customers unofficially internet set users enterprises content providers interconnected internet service providers isp engineering viewpoint internet set subnets aggregates subnets share registered ip address space exchange information reachability ip addresses border gateway protocol typically human readable names servers translated ip addresses transparently users directory function domain dns internet business business business consumer consumer consumer communications money sensitive information exchanged communications apt protected form communications security mechanism intranets extranets securely superimposed internet access general internet users administrators secure virtual private network vpn technology comparison network diagram software cyberspace history internet network simulation network planning design references reading shelly gary et al discovering computers edition wendell odom rus healy denise donohue ccie routing switching indianapolis cisco press kurose james keith ross networking approach featuring internet pearson education william stallings networking internet protocols technology pearson education important publications networks network communication architecture protocols osi network architecture layers model dimitri bertsekas robert gallager data networks prentice hall external links ieee ethernet manufacturer information", "Algorithms and theory": "flow chart algorithm euclid algorithm calculating greatest common divisor numbers locations named algorithm proceeds successive subtractions loops test yields yes true accurately number location greater equal number location algorithm specifies meaning number replaces old similarly process terminates contents yielding algorithm derived scott symbols drawing style tausworthe mathematics science algorithm self contained step step set operations performed algorithms exist perform calculation data processing automated reasoning algorithm effective method expressed finite space time defined formal language calculating function starting initial state initial input instructions computation executed proceeds finite number defined successive states eventually producing output terminating final ending state transition state necessarily deterministic algorithms known randomized algorithms incorporate random input concept algorithm existed centuries partial formalization modern algorithm began attempts solve decision problem posed david hilbert subsequent formalizations framed attempts define effective calculability effective method formalizations included g\u00f6del herbrand kleene recursive functions alonzo church lambda calculus emil post formulation alan turing turing machines giving formal definition algorithms corresponding intuitive notion remains challenging problem word origin algorithm stems latin translation book written al khw\u0101rizm\u012b persian mathematician astronomer geographer al khwarizmi wrote book titled calculation hindu numerals ad principally responsible spreading indian numeration middle east europe translated latin algoritmi numero indorum english al khwarizmi hindu art reckoning term algoritmi title book led term algorithm informal definition informal definition set rules precisely defines sequence operations include programs including programs perform numeric calculations generally program algorithm stops eventually prototypical example algorithm euclid algorithm determine maximum common divisor integers example described flow chart example later section offer informal meaning word following quotation human write fast long small smaller smaller limit trying write molecules atoms electrons list members enumerably infinite set writing names notation humans equally useful case certain enumerably infinite sets explicit instructions determining th member set arbitrary finite instructions given explicitly form followed computing machine human capable carrying elementary operations symbols enumerably infinite set elements correspondence integers boolos jeffrey saying algorithm implies instructions process creates output integers arbitrary input integer integers theory arbitrarily large algorithm algebraic equation arbitrary input variables produce output authors attempts define notion indicate word implies order addition example precise instructions language understood fast efficient good process specifies moves machine human equipped necessary internally contained information capabilities decode process arbitrary input integers symbols symbols effectively produce reasonable time output integer specified place specified format concept algorithm define notion decidability notion central explaining formal systems come starting small set axioms rules logic time algorithm requires complete measured apparently related customary physical dimension uncertainties characterize ongoing work stems unavailability definition algorithm suits concrete sense abstract usage term formalization algorithms essential way computers process data programs contain algorithms specific instructions perform specific order carry specified task calculating employees paychecks printing students report cards algorithm considered sequence operations simulated turing complete authors assert thesis include minsky savage gurevich minsky maintain turing procedure naturally called effective fact realized simple machine extreme arguments favor hard refute gurevich turing informal argument favor thesis justifies stronger thesis algorithm simulated turing machine according savage algorithm computational process defined turing machine typically algorithm associated processing information data read input source written output device stored processing stored data regarded internal state entity performing algorithm practice state stored data structures computational process algorithm rigorously defined specified way applies possible circumstances arise conditional steps systematically dealt case case criteria case clear computable algorithm precise list precise steps order computation critical functioning algorithm instructions usually assumed listed explicitly described starting going idea described formally flow control far discussion formalization algorithm assumed premises imperative programming common conception attempts task discrete mechanical means unique conception formalized algorithms assignment operation setting value variable derives intuition memory scratchpad example assignment alternate conceptions constitutes algorithm functional programming logic programming expressing algorithms algorithms expressed kinds notation including natural languages pseudocode flowcharts drakon charts programming languages control tables processed interpreters natural language expressions algorithms tend verbose ambiguous rarely complex technical algorithms pseudocode flowcharts drakon charts control tables structured ways express algorithms avoid ambiguities common natural language statements programming languages primarily intended expressing algorithms form executed way define document algorithms wide variety representations possible express given turing machine program sequence machine tables finite state machine state transition table control table flowcharts drakon charts state diagram form rudimentary machine code assembly code called sets quadruples turing machine representations algorithms classed accepted levels turing machine description high level description prose algorithm ignoring implementation details level need mention machine manages tape head implementation description prose define way turing machine uses head way stores data tape level details states transition function formal description detailed lowest level gives turing machine state table example simple algorithm add described levels algorithm examples implementation logical nand algorithm implemented electronically chip algorithms intended implemented programs algorithms implemented means biological neural network example human brain implementing arithmetic insect looking food electrical circuit mechanical device algorithms b\u00f6hm jacopini structures sequence rectangles descending page structures primitive conditional goto test true goto step xxx diamond unconditional goto rectangle assignment operators rectangle halt rectangle nesting structures inside assignment blocks result complex diagrams cf tausworthe systems algorithm basically instance logic written software software developers effective intended target produce output given input null optimal algorithm running old hardware produce faster results non optimal higher time complexity algorithm purpose running efficient hardware algorithms like hardware considered technology elegant compact programs good fast programs notion simplicity elegance appears informally knuth precisely chaitin knuth want good algorithms loosely defined aesthetic sense criterion length time taken perform algorithm criteria adaptability algorithm computers simplicity elegance chaitin program elegant mean smallest possible program producing output chaitin prefaces definition ll prove program elegant proof solve halting problem ibid algorithm versus function computable algorithm given function multiple algorithms exist true expanding available instruction set available programmer rogers observes important distinguish notion algorithm procedure notion function computable algorithm mapping yielded procedure function different algorithms unfortunately tradeoff goodness speed elegance compactness elegant program steps complete computation elegant example uses euclid algorithm appears computers computors models computation human computor restricted type machine discrete deterministic mechanical device blindly follows instructions melzak lambek primitive models reduced notion elements discrete distinguishable locations ii discrete counters iii agent iv list instructions effective relative capability agent minsky describes congenial variation lambek abacus model simple bases computability minsky machine proceeds sequentially depending counts instructions conditional goto unconditional goto changes program flow sequence halt minsky machine includes assignment replacement substitution operations zero contents location replaced successor decrement rarely programmer write code limited instruction set minsky shows melzak lambek machine turing complete general types instructions conditional goto unconditional goto assignment replacement substitution halt simulation algorithm computor language knuth advises reader best way learn algorithm try immediately pen paper work example simulation execution real thing programmer translate algorithm language simulator computor effectively execute stone gives example computing roots quadratic equation computor know square root algorithm effective provide set rules extracting square root means programmer know language effective relative target computing agent computor model simulation van emde boas observes base complexity theory abstract instead concrete machines arbitrariness choice model remains point notion simulation enters speed measured instruction set matters example subprogram euclid algorithm compute remainder execute faster programmer modulus division instruction available subtraction worse minsky decrement structured programming canonical structures church turing thesis algorithm computed model known turing complete minsky demonstrations turing completeness requires instruction types conditional goto unconditional goto assignment halt kemeny kurtz observe undisciplined use unconditional gotos conditional gotos result spaghetti code programmer write structured programs instructions hand possible hard write badly structured programs structured language tausworthe augments b\u00f6hm jacopini canonical structures sequence case additional benefit structured program lends proofs correctness mathematical induction canonical flowchart symbols graphical aide called flowchart offers way document algorithm program like program flow minsky machine flowchart starts page proceeds primary symbols directed arrow showing program flow rectangle sequence goto diamond dot tie b\u00f6hm jacopini canonical structures primitive shapes sub structures nest rectangles single exit occurs superstructure symbols use build canonical structures shown diagram examples algorithm example quicksort algorithm sorting array randomized values red bars mark pivot element start animation element farthest right hand chosen pivot simplest algorithms largest number list numbers random order finding solution requires looking number list follows simple algorithm stated high level description english prose high level description numbers set highest number assume number set largest number set remaining number set number larger current largest number consider number largest number set numbers left set iterate consider current largest number largest number set quasi formal description written prose closer high level language program following formal coding algorithm pseudocode pidgin code input list numbers output largest number list size return null largest item item largest largest item return largest euclid algorithm example diagram euclid algorithm heath added euclid measuring gives numerical examples nicomachus gives example subtract greater left subtract possible left subtract left subtract possible left subtracted heath comments phrase curious meaning obvious meaning phrase ending number heath euclid algorithm appears proposition ii book vii elementary number theory elements euclid poses problem given numbers prime greatest common measure defines number multitude composed units counting number positive integer including measure place shorter measuring length successively times longer length remaining portion shorter length modern words remainder quotient remainder modulus integer fractional left division euclid method succeed starting lengths satisfy requirements lengths ii subtraction proper test guarantee smaller numbers subtracted larger alternately equal subtraction yields euclid original proof adds lengths prime euclid stipulated construct reductio ad absurdum proof numbers common measure fact greatest nicomachus algorithm euclid numbers prime yields number common measure precise following nicomachus algorithm graphical expression euclid algorithm example language euclid algorithm instruction types required execute euclid algorithm logical tests conditional goto unconditional goto assignment replacement subtraction location symbolized upper case letter varying quantity number location written lower case letter usually associated location example location start contain number inelegant program euclid algorithm inelegant translation knuth version algorithm subtraction based remainder loop replacing use division modulus instruction derived knuth depending numbers inelegant compute fewer steps elegant following algorithm framed knuth step version euclid nicomachus division remainder uses successive subtractions shorter length remaining length high level description shown boldface adapted knuth input locations numbers represent lengths input initialize remaining length equal starting initial input length ensure ensure smaller numbers larger contents larger number skip exchange steps goto step swap contents step redundant useful later discussion remainder remaining length shorter length repeatedly subtract measuring number remaining length measuring goto measure remainder loop goto remainder measure exact remainder program halt ii algorithm continue measure left remainder measuring number goto step continue step interchange nut euclid algorithm use remainder measure previously smaller number serves temporary location repeat measuring process goto output contains greatest common divisor print halt end stop elegant program euclid algorithm following version euclid algorithm requires core instructions required inelegant worse inelegant requires types instructions flowchart elegant article unstructured basic language steps numbered instruction let assignment instruction symbolized rem euclid algorithm greatest common divisor print type integers greater input goto goto let goto let goto print end elegant works place outer euclid loop elegant shifts forth loops loop computes loop computes works minuend equal subtrahend difference minuend subtrahend minuend new measuring length subtrahend new length measured words sense subtraction reverses testing euclid algorithms algorithm author wants test cases usually suffice confirm core functionality source uses knuth suggested interesting case relatively prime numbers exceptional cases identified tested inelegant perform properly ditto elegant yes happens number zero numbers zero inelegant computes forever cases elegant computes forever happens negative numbers entered fractional numbers input numbers domain function computed algorithm program include positive integers including zero failures zero indicate algorithm program instantiates partial function total function notable failure exceptions ariane rocket failure proof program correctness use mathematical induction knuth demonstrates application mathematical induction extended version euclid algorithm proposes general method applicable proving validity algorithm tausworthe proposes measure complexity program length correctness proof measuring improving euclid algorithms elegance compactness versus goodness speed core instructions elegant clear winner compared inelegant instructions inelegant faster arrives halt fewer steps algorithm analysis indicates case elegant conditional tests subtraction loop inelegant algorithm usually requires loop throughs average time wasted test needed remainder computed algorithms improved programmer judges program fit effective computes function intended author question improved compactness inelegant improved elimination steps chaitin proved compacting algorithm automated generalized algorithm heuristically exhaustive search examples busy beaver trial error cleverness insight application inductive reasoning observe steps repeated steps comparison elegant provides hint steps steps eliminated reduces number core instructions makes elegant elegant steps speed elegant improved moving test outside subtraction loops change calls addition instructions goto elegant computes example numbers faster given case require detailed analysis algorithmic analysis frequently important know particular resource time storage theoretically required given algorithm methods developed analysis algorithms obtain quantitative answers estimates example sorting algorithm time requirement big notation length list times algorithm needs remember values largest number far current position input list said space requirement space required store input numbers counted counted different algorithms complete task different set instructions time space effort example binary search algorithm usually outperforms brute force sequential search table lookups sorted lists formal versus empirical analysis study algorithms discipline science practiced abstractly use specific programming language implementation sense algorithm analysis resembles mathematical disciplines focuses underlying properties algorithm specifics particular implementation usually pseudocode analysis simplest general representation ultimately algorithms usually implemented particular hardware software platforms algorithmic efficiency eventually test real code solution problem efficiency particular algorithm significant consequences extremely large algorithms designed fast interactive commercial long life scientific usage critical scaling small large frequently exposes inefficient algorithms benign empirical testing useful uncover unexpected interactions affect performance benchmarks compare potential improvements algorithm program optimization execution efficiency illustrate potential improvements possible established algorithms recent significant innovation relating fft algorithms heavily field image processing decrease processing time times applications like medical imaging general speed improvements depend special properties problem common practical applications speedups magnitude enable computing devices extensive use image processing like digital cameras medical equipment consume power classification ways classify algorithms merits implementation way classify algorithms implementation means recursion iteration recursive algorithm invokes makes reference repeatedly certain condition known termination condition matches method common functional programming iterative algorithms use repetitive constructs like loops additional data structures like stacks solve given problems problems naturally suited implementation example towers hanoi understood recursive implementation recursive version equivalent possibly complex iterative version vice versa logical algorithm viewed controlled logical deduction notion expressed algorithm logic control logic component expresses axioms computation control component determines way deduction applied axioms basis logic programming paradigm pure logic programming languages control component fixed algorithms specified supplying logic component appeal approach elegant semantics change axioms defined change algorithm serial parallel distributed algorithms usually discussed assumption computers execute instruction algorithm time computers called serial computers algorithm designed environment called serial algorithm opposed parallel algorithms distributed algorithms parallel algorithms advantage architectures processors work problem time distributed algorithms utilize multiple machines connected network parallel distributed algorithms divide problem symmetrical asymmetrical subproblems collect results resource consumption algorithms processor cycles processor communication overhead processors sorting algorithms parallelized efficiently communication overhead expensive iterative algorithms generally parallelizable problems parallel algorithms called inherently serial problems deterministic non deterministic deterministic algorithms solve problem exact decision step algorithm non deterministic algorithms solve problems guessing typical guesses accurate use heuristics exact approximate algorithms reach exact solution approximation algorithms seek approximation close true solution approximation use deterministic random strategy algorithms practical value hard problems quantum algorithm run realistic model quantum computation term usually algorithms inherently quantum use essential feature quantum computation quantum superposition quantum entanglement design paradigm way classifying algorithms design methodology paradigm certain number paradigms different furthermore categories include different types algorithms common paradigms brute force exhaustive search naive method trying possible solution best divide conquer divide conquer algorithm repeatedly reduces instance problem smaller instances problem usually recursively instances small solve easily example divide conquer merge sorting sorting segment data dividing data segments sorting entire data obtained conquer phase merging segments simpler variant divide conquer called decrease conquer algorithm solves identical subproblem uses solution subproblem solve bigger problem divide conquer divides problem multiple subproblems conquer stage complex decrease conquer algorithms example decrease conquer algorithm binary search algorithm search enumeration problems playing chess modeled problems graphs graph exploration algorithm specifies rules moving graph useful problems category includes search algorithms branch bound enumeration backtracking randomized algorithm algorithms choices randomly pseudo randomly useful finding approximate solutions problems finding exact solutions impractical heuristic method problems known fastest approximations involve randomness randomized algorithms polynomial time complexity fastest algorithms problems open question known versus np problem large classes algorithms monte carlo algorithms return correct answer high probability rp subclass run polynomial time las vegas algorithms return correct answer running time bound zpp reduction complexity technique involves solving difficult problem transforming better known problem hopefully asymptotically optimal algorithms goal reducing algorithm complexity dominated resulting reduced algorithm example selection algorithm finding median unsorted list involves sorting list expensive portion pulling middle element sorted list cheap portion technique known transform conquer optimization problems optimization problems specific classification algorithms algorithm problems fall general categories described following linear programming searching optimal solutions linear function bound linear equality inequality constrains constrains problem directly producing optimal solutions algorithms solve problem category popular simplex algorithm problems solved linear programming include maximum flow problem directed graphs problem additionally requires unknowns integer classified integer programming linear programming algorithm solve problem proved restrictions integer values superficial solutions satisfy restrictions general case specialized algorithm algorithm finds approximate solutions depending difficulty problem dynamic programming problem shows optimal substructures meaning optimal solution problem constructed optimal solutions subproblems overlapping subproblems meaning subproblems solve different problem instances quicker approach called dynamic programming avoids recomputing solutions computed example floyd warshall algorithm shortest path goal vertex weighted graph shortest path goal adjacent vertices dynamic programming memoization main difference dynamic programming divide conquer subproblems independent divide conquer subproblems overlap dynamic programming difference dynamic programming straightforward recursion caching memoization recursive calls subproblems independent repetition memoization help dynamic programming solution complex problems memoization maintaining table subproblems solved dynamic programming reduces exponential nature problems polynomial complexity greedy method greedy algorithm similar dynamic programming algorithm works examining substructures case problem given solution algorithms start solution given constructed way improve making small modifications problems optimal solution stop local optima solutions improved algorithm optimum popular use greedy algorithms finding minimal spanning tree finding optimal solution possible method huffman tree kruskal prim sollin greedy algorithms solve optimization problem heuristic method optimization problems heuristic algorithms solution close optimal solution cases finding optimal solution impractical algorithms work getting closer closer optimal solution progress principle run infinite time optimal solution merit solution close optimal solution relatively short time algorithms include local search tabu search simulated annealing genetic algorithms like simulated annealing non deterministic algorithms like tabu search deterministic bound error non optimal solution known algorithm categorized approximation algorithm field study field science problems needs efficient algorithms related problems field studied example classes search algorithms sorting algorithms merge algorithms numerical algorithms graph algorithms string algorithms computational geometric algorithms combinatorial algorithms medical algorithms machine learning cryptography data compression algorithms parsing techniques fields tend overlap algorithm advances field improve completely unrelated fields example dynamic programming invented optimization resource consumption industry solving broad range problems fields complexity algorithms classified time need complete compared input size wide variety algorithms complete linear time relative input size exponential time worse halt additionally problems multiple algorithms differing complexity problems algorithms known efficient algorithms mappings problems problems owing suitable classify problems instead algorithms equivalence classes based complexity best possible algorithms burgin uses generalized definition algorithms relaxes common requirement output algorithm computes function determined finite number steps defines super recursive class algorithms class algorithms possible compute functions computable turing machine burgin closely related study methods continuous algorithms adjective continuous applied word algorithm mean algorithm operating data represents continuous quantities data represented discrete approximations algorithms studied numerical analysis algorithm form differential equation operates continuously data running analog legal issues software patents general overview patentability software including implemented algorithms algorithms usually patentable united states claim consisting solely simple manipulations abstract concepts numbers signals constitute processes uspto algorithms patentable gottschalk benson practical applications algorithms patentable example diamond diehr application simple feedback algorithm aid curing synthetic rubber deemed patentable patenting software highly controversial highly criticized patents involving algorithms especially data compression algorithms unisys lzw patent additionally cryptographic algorithms export restrictions export cryptography etymology word algorithm algorism writing versions comes al khw\u0101rizm\u012b pronounced classical arabic al khwarithmi al khw\u0101rizm\u012b persian mathematician astronomer geographer scholar house wisdom baghdad means native khwarezm city greater iran era modern day uzbekistan wrote treatise arabic language translated latin th century title algoritmi numero indorum title means algoritmi numbers indians algoritmi translator latinization al khwarizmi al khwarizmi widely read mathematician europe late middle ages primarily book algebra late medieval latin algorismus corruption simply meant decimal number meaning modern english algorism th century french word form meaning changed algorithme english adopted french soon wasn late th century algorithm took meaning modern english alternative etymology claims origin terms algebra late medieval sense arabic arithmetics arithmos greek term number literally meaning arabic numbers arabic calculation algorithms al kharizmi works meant modern sense type repetitive calculus mention fundamental work known algebra originally titled compendious book calculation completion balancing describing types repetitive calculation quadratic equations sense algorithms known europe long al kharizmi oldest algorithm known today euclidean algorithm extended euclidean algorithm coining term algorithm greeks calling anthyphairesis literally meaning anti subtraction reciprocal subtraction reading algorithms known greeks centuries euclid instead word algebra greeks term arithmetica \u1f00\u03c1\u03b9\u03b8\u03bc\u03b7\u03c4\u03b9\u03ba\u03ae diophantus works called father algebra diophantine equation eudoxos history development notion algorithm ancient greece algorithms ancient greece examples sieve eratosthenes described introduction arithmetic nicomachus euclidean algorithm described euclid elements bc origin word algorithm comes th century persian mathematician abu abdullah muhammad ibn musa al khwarizmi work built th century indian mathematician brahmagupta word algorism originally referred rules performing arithmetic hindu arabic numerals evolved european latin translation al khwarizmi algorithm th century use word evolved include definite procedures solving problems performing tasks discrete distinguishable symbols tally marks track flocks sacks grain money ancients tallying accumulating stones marks scratched sticks making discrete symbols clay babylonian egyptian use marks symbols eventually roman numerals abacus evolved dilson tally marks appear prominently unary numeral arithmetic turing machine post turing machine computations manipulation symbols place holders numbers algebra work ancient greek geometers euclidean algorithm indian mathematician brahmagupta persian mathematician al khwarizmi terms algorism algorithm derived western european mathematicians culminated leibniz notion calculus ratiocinator ca mechanical contrivances discrete states clock bolter credits invention weight driven clock key invention europe middle ages particular verge escapement provides tick tock mechanical clock accurate automatic machine led immediately mechanical automata beginning th century finally computational machines difference engine analytical engines charles babbage countess ada lovelace mid th century lovelace credited creation algorithm intended processing babbage analytical engine device considered real turing complete instead calculator called history programmer result implementation babbage second device realized decades lifetime logical machines stanley jevons logical abacus logical machine technical problem reduce boolean equations presented form similar known karnaugh maps jevons describes simple abacus slips wood furnished pins contrived class logical combinations picked mechanically recently reduced completely mechanical form embodied indirect process inference called logical machine machine came equipped certain moveable wooden rods foot keys like piano machine analyze syllogism simple logical argument machine displayed fellows royal society logician john venn symbolic logic turned jaundiced eye effort high estimate importance called logical machines contrivances present known likely discovered deserve logical machines algorithm outdone presented plan somewhat analogous apprehend prof jevon abacus corresponding prof jevons logical machine following contrivance described prefer merely logical diagram machine suppose completely rationally expected logical machine jacquard loom hollerith punch cards telegraphy telephony relay bell newell indicate jacquard loom precursor hollerith cards punch cards telephone switching technologies roots tree leading development computers mid th century telegraph precursor telephone use world discrete distinguishable encoding letters dots dashes common sound late th century ticker tape ca use use hollerith cards census came teleprinter ca punched paper use baudot code tape telephone switching networks relays invented work george stibitz inventor digital adding device worked bell laboratories observed burdensome use mechanical calculators gears went home evening intending test idea tinkering stibitz constructed binary adding device davis observes particular importance relay binary states open closed development beginning calculators electrical relays machines built having scope babbage envisioned mathematics th century mid th century symbols rules rapid succession mathematics george boole gottlob frege giuseppe peano reduced arithmetic sequence symbols manipulated rules peano principles arithmetic presented new method attempt axiomatization mathematics symbolic language heijenoort gives frege kudos frege important single work written logic formula language lingua characterica language written special symbols pure thought free rhetorical embellishments constructed specific symbols manipulated according definite rules work frege simplified amplified alfred north whitehead bertrand russell principia mathematica paradoxes time number disturbing paradoxes appeared literature particular burali forti paradox russell paradox richard paradox resultant considerations led kurt g\u00f6del paper specifically cites paradox liar completely reduces rules recursion numbers effective calculability effort solve defined precisely hilbert mathematicians set define meant effective method effective calculation effective calculability calculation succeed rapid succession following appeared alonzo church stephen kleene rosser calculus finely honed definition general recursion work g\u00f6del acting suggestions jacques herbrand cf g\u00f6del princeton lectures subsequent simplifications kleene church proof unsolvable emil post definition effective calculability worker mindlessly following list instructions left right sequence rooms mark erase paper observe paper yes decision instruction alan turing proof unsolvable use automatic machine effect identical post formulation barkley rosser definition effective method terms machine kleene proposal precursor church thesis called thesis years later kleene renaming thesis church thesis proposing turing thesis emil post alan turing remarkable coincidence men knowing describing process men computers working computations yield virtually identical definitions emil post described actions human follows concepts involved symbol space work leading problem answer carried fixed unalterable set directions symbol space way infinite sequence spaces boxes problem solver worker work symbol space capable operating box time box admit possible conditions unmarked having single mark vertical stroke box singled called starting point specific problem given symbolic form finite number boxes input marked stroke likewise answer output given symbolic form configuration marked boxes set directions applicable general problem sets deterministic process applied specific problem process terminates comes direction type stop post turing machine alan turing statue bletchley park alan turing work preceded stibitz unknown stibitz knew work turing turing biographer believed turing use typewriter like model derived youthful alan dreamt inventing typewriters boy mrs turing typewriter begun asking meant calling typewriter mechanical given prevalence morse code telegraphy ticker tape machines teletypewriters conjecture influences turing model computation called turing machine begins post analysis human whittles simple set basic motions states mind continues step creates machine model computation numbers computing normally writing certain symbols paper suppose paper divided squares like child arithmetic book assume computation carried dimensional paper tape divided squares shall suppose number symbols printed finite behaviour moment determined symbols observing state mind moment suppose bound number symbols squares observe moment wishes observe use successive observations suppose number states mind need taken account finite let imagine operations performed split simple operations elementary easy imagine divided turing reduction yields following simple operations include changes symbol observed squares changes squares observed square squares previously observed squares change necessarily invoke change state mind general single operation taken following possible change symbol possible change state mind possible change observed squares possible change state mind construct machine work years later turing expanded analysis thesis definition forceful expression function said effectively calculable values purely mechanical process fairly easy intuitive grasp idea desirable definite mathematical expressible definition discusses history definition pretty presented respect g\u00f6del herbrand kleene church turing post statement literally understanding purely mechanical process carried machine possible mathematical description certain normal form structures machines development ideas leads author definition computable function identification computability effective calculability shall use expression computable function mean function calculable machine let effectively calculable refer intuitive idea particular identification definitions rosser kleene barkley rosser defined effective mathematical method following manner italicization added effective method special sense method step precisely determined certain produce answer finite number steps special meaning different precise definitions given date footnote discussion immediately simplest state post turing says essentially effective method solving certain sets problems exists build machine solve problem set human intervention inserting question later reading answer definitions equivalent matter fact equivalent strong argument correctness rosser rosser footnote references work church kleene definition definability particular church use unsolvable problem elementary number theory herbrand g\u00f6del use recursion particular g\u00f6del use famous paper formally undecidable propositions principia mathematica related systems post turing mechanism models computation stephen kleene defined famous thesis known church turing thesis following context boldface original algorithmic theories setting complete algorithmic theory procedure performable set values independent variables procedure necessarily terminates manner outcome read definite answer yes question predicate value true kleene history number efforts directed refinement definition algorithm activity going issues surrounding particular foundations mathematics especially church turing thesis philosophy mind especially arguments artificial intelligence algorithm abstract machine algorithm engineering algorithmic composition algorithmic synthesis algorithmic trading garbage garbage introduction algorithms list algorithm general topics list important publications theoretical science algorithms numerical mathematics consortium theory computation computability theory computational complexity theory notes references bell gordon newell allen structures readings examples mcgraw hill book company new york isbn includes excellent bibliography references cf chapter turing machines discuss certain enumerable sets effectively mechanically enumerable campagnolo moore costa analog subrecursive functions proc th conference real numbers computers odense university pp reprinted undecidable ff expression church thesis particular page undecidable defines notion effective calculability terms algorithm uses word terminates reprinted undecidable ff church shows unsolvable pages text pages footnotes davis gives commentary article papers g\u00f6del alonzo church turing rosser kleene emil post included cited article listed author davis offers concise biographies leibniz boole frege cantor hilbert g\u00f6del turing von neumann stealing villain brief bios joseph marie jacquard babbage ada lovelace claude shannon howard aiken yuri gurevich sequential abstract state machines capture sequential algorithms acm transactions computational logic vol july pages includes bibliography sources presented american mathematical society september reprinted undecidable ff kleene definition general recursion known mu recursion church paper unsolvable problem elementary number theory proved decision problem undecidable negative result reprinted undecidable ff kleene refined definition general recursion proceeded chapter algorithmic theories posit thesis later repeat thesis kleene church thesis kleene church thesis excellent accessible readable reference source mathematical foundations kosovsky elements mathematical logic application theory subrecursive algorithms lsu publ leningrad markov theory algorithms translated jacques schorr kon pst staff imprint moscow academy sciences ussr jerusalem israel program scientific translations available office technical services dept commerce washington description cm added russian translation works mathematical institute academy sciences ussr original title teoriya algerifmov qa dartmouth college library dept commerce office technical services number ots minsky expands idea algorithm effective procedure chapter computability effective procedures algorithms infinite machines reprinted undecidable ff post defines simple algorithmic like process man writing marks erasing marks going box box eventually halting follows list simple instructions cited kleene source thesis called church turing thesis reprinted undecidable ff rosser famous definition effective method method step precisely predetermined certain produce answer finite number steps machine solve problem set human intervention inserting question later reading answer undecidable cf particular chapter titled algorithms turing machines programs succinct informal definition sequence instructions obeyed robot called algorithm corrections ibid vol pp reprinted undecidable ff turing famous paper completed master dissertation king college cambridge uk reprinted undecidable ff turing paper defined oracle phd thesis princeton usa united states patent trademark office mathematical algorithms patentability manual patent examining procedure mpep latest revision august secondary references isbn pbk isbn pbk rd edition isbn pbk isbn cf chapter spirit truth history leading discussion proof reading knuth donald selected papers analysis algorithms stanford california center study language information knuth donald selected papers design algorithms stanford california center study language information external links dictionary algorithms data structures national institute standards technology algorithms data structures dr nikolai bezroukov algorithm repositories stony brook algorithm repository state university new york stony brook netlib repository university tennessee oak ridge national laboratory collected algorithms acm association computing machinery stanford graphbase stanford university combinatorica university iowa state university new york stony brook library efficient datastructures algorithms leda previously max planck institut f\u00fcr informatik archive interesting code semantic wiki collect categorize relate algorithms data structures lecture notes algorithms course materials jeff erickson university illinois community algorithms google", "Artificial intelligence": "artificial intelligence ai intelligence exhibited machines software academic field study studies create computers software capable intelligent behavior major ai researchers textbooks define field study design intelligent agents intelligent agent perceives environment takes actions maximize chances success john mccarthy coined term defines science engineering making intelligent machines ai research highly technical specialized deeply divided subfields fail communicate division social cultural factors subfields grown particular institutions work individual researchers ai research divided technical issues subfields focus solution specific problems focus possible approaches use particular tool accomplishment particular applications central problems goals ai research include reasoning knowledge planning learning natural language processing communication perception ability manipulate objects general intelligence field long term goals currently popular approaches include statistical methods computational intelligence traditional symbolic ai large number tools ai including versions search mathematical optimization logic methods based probability economics ai field number sciences professions converge including science mathematics psychology linguistics philosophy neuroscience specialized fields artificial psychology field founded claim central property humans human intelligence sapience homo sapiens precisely described machine simulate raises philosophical issues nature mind ethics creating artificial beings endowed human like intelligence issues addressed myth fiction philosophy antiquity artificial intelligence subject tremendous optimism suffered stunning setbacks today essential technology industry providing heavy lifting challenging problems science history thinking machines artificial beings appear greek myths talos crete bronze robot hephaestus pygmalion galatea human likenesses believed intelligence built major civilization animated cult images worshiped egypt greece humanoid automatons built yan shi hero alexandria al jazari widely believed artificial beings created j\u0101bir ibn hayy\u0101n judah loew paracelsus th th centuries artificial beings common feature fiction mary shelley frankenstein karel \u010dapek rossum universal robots pamela mccorduck argues examples ancient urge describes forge gods stories creatures fates discuss hopes fears ethical concerns presented artificial intelligence mechanical formal reasoning developed philosophers mathematicians antiquity study logic led directly invention programmable digital electronic based work mathematician alan turing turing theory computation suggested machine shuffling symbols simple simulate conceivable act mathematical deduction concurrent discoveries neurology information theory cybernetics inspired small group researchers begin seriously consider possibility building electronic brain field ai research founded conference campus dartmouth college summer attendees including john mccarthy marvin minsky allen newell arthur samuel herbert simon leaders ai research decades students wrote programs people simply astonishing computers winning checkers solving word problems algebra proving logical theorems speaking english middle research heavily funded department defense laboratories established world ai founders profoundly optimistic future new field herbert simon predicted machines capable years work man marvin minsky agreed writing generation problem creating artificial intelligence substantially solved failed recognize difficulty problems faced response criticism sir james lighthill ongoing pressure congress fund productive projects british governments cut undirected exploratory research ai years later called ai winter period funding ai projects hard early ai research revived commercial success expert systems form ai program simulated knowledge analytical skills human experts market ai reached billion dollars time japan fifth generation project inspired british governments restore funding academic research field beginning collapse lisp machine market ai fell disrepute second longer lasting ai winter began early st century ai achieved greatest successes albeit somewhat scenes artificial intelligence logistics data mining medical diagnosis areas technology industry success factors increasing computational power computers moore law greater emphasis solving specific subproblems creation new ties ai fields working similar problems new commitment researchers solid mathematical methods rigorous scientific standards deep blue chess playing beat reigning world chess champion garry kasparov february jeopardy quiz exhibition match ibm question answering watson defeated greatest jeopardy champions brad rutter ken jennings significant margin kinect provides body motion interface xbox xbox uses algorithms emerged lengthy ai research intelligent personal assistants smartphones research goals general problem simulating creating intelligence broken number specific sub problems consist particular traits capabilities researchers like intelligent display traits described received attention deduction reasoning problem solving early ai researchers developed algorithms imitated step step reasoning humans use solve puzzles logical deductions late ai research developed highly successful methods dealing uncertain incomplete information employing concepts probability economics difficult problems algorithms require enormous computational resources experience combinatorial explosion memory time required astronomical problem goes certain size search efficient problem solving algorithms high priority ai research human beings solve problems fast intuitive judgements conscious step step deduction early ai research able model ai progress imitating kind sub symbolic problem solving embodied agent approaches emphasize importance sensorimotor skills higher reasoning neural net research attempts simulate structures inside brain rise skill statistical approaches ai mimic probabilistic nature human ability guess knowledge representation ontology represents knowledge set concepts domain relationships concepts knowledge representation knowledge engineering central ai research problems machines expected solve require extensive knowledge world things ai needs represent objects properties categories relations objects situations events states time causes effects knowledge knowledge know people know researched domains representation exists ontology set objects relations concepts machine knows general called upper ontologies attempt provide foundation knowledge difficult problems knowledge representation default reasoning qualification problem things people know form working assumptions example bird comes conversation people typically picture animal fist sized sings flies things true birds john mccarthy identified problem qualification problem commonsense rule ai researchers care represent tend huge number exceptions simply true false way abstract logic requires ai research explored number solutions problem breadth commonsense knowledge number atomic facts average person knows astronomical research projects attempt build complete knowledge base commonsense knowledge cyc require enormous amounts laborious ontological engineering built hand complicated concept time major goal understand concepts able learn reading sources like internet able add ontology subsymbolic form commonsense knowledge people know represented facts statements express verbally example chess master avoid particular chess position feels exposed art critic look statue instantly realize fake intuitions tendencies represented brain non consciously sub symbolically knowledge like informs supports provides context symbolic conscious knowledge related problem sub symbolic reasoning hoped situated ai computational intelligence statistical ai provide ways represent kind knowledge planning hierarchical control form control set devices governing software arranged hierarchy intelligent agents able set goals achieve need way visualize future representation state world able predictions actions change able choices maximize utility value available choices classical planning problems agent assume thing acting world certain consequences actions agent actor periodically ascertain world matches predictions change plan necessary requiring agent reason uncertainty multi agent planning uses cooperation competition agents achieve given goal emergent behavior evolutionary algorithms swarm intelligence learning machine learning study algorithms improve automatically experience central ai research field inception unsupervised learning ability patterns stream input supervised learning includes classification numerical regression classification determine category belongs seeing number examples things categories regression attempt produce function describes relationship inputs outputs predicts outputs change inputs change reinforcement learning agent rewarded good responses punished bad ones agent uses sequence rewards punishments form strategy operating problem space types learning analyzed terms decision theory concepts like utility mathematical analysis machine learning algorithms performance branch theoretical science known computational learning theory developmental robotics developmental learning approaches elaborated lifelong cumulative acquisition repertoires novel skills robot autonomous self exploration social interaction human teachers guidance mechanisms active learning maturation motor synergies imitation natural language processing communication parse tree represents syntactic structure sentence according formal grammar natural language processing gives machines ability read understand languages humans speak sufficiently powerful natural language processing enable natural language user interfaces acquisition knowledge directly human written sources newswire texts straightforward applications natural language processing include information retrieval text mining question answering machine translation common method processing extracting meaning natural language semantic indexing increases processing speeds drop cost data storage makes indexing large volumes abstractions user input efficient perception machine perception ability use input sensors cameras microphones tactile sensors sonar exotic deduce aspects world vision ability analyze visual input selected subproblems speech recognition facial recognition object recognition motion manipulation field robotics closely related ai intelligence required robots able handle tasks object manipulation navigation sub problems localization knowing finding things mapping learning building map environment motion planning figuring path planning going point space point involve compliant motion robot moves maintaining physical contact object long term goals long term goals research pertaining artificial intelligence social intelligence creativity general intelligence social intelligence kismet robot rudimentary social skills affective computing study development systems devices recognize interpret process simulate human affects field spanning sciences psychology cognitive science origins field traced far early philosophical inquiries emotion modern branch science originated rosalind picard paper affective computing motivation research ability simulate empathy machine interpret emotional state humans adapt behaviour giving appropriate response emotions emotion social skills play roles intelligent agent able predict actions understanding motives emotional states involves elements game theory decision theory ability model human emotions perceptual skills detect emotions effort facilitate human interaction intelligent machine want able display emotions actually experience order appear sensitive emotional dynamics human interaction creativity sub field ai addresses creativity theoretically philosophical psychological perspective practically specific implementations systems generate outputs considered creative systems identify assess creativity related areas computational research artificial intuition artificial thinking general intelligence researchers think work eventually incorporated machine general intelligence known strong ai combining skills exceeding human abilities believe anthropomorphic features like artificial consciousness artificial brain required project problems require general intelligence considered solved example straightforward specific task like machine translation requires machine read write languages nlp follow author argument reason know talked knowledge faithfully reproduce author intention social intelligence problem like machine translation considered ai complete order solve particular problem solve problems approaches established unifying theory paradigm guides ai research researchers disagree issues long standing questions remained unanswered artificial intelligence simulate natural intelligence studying psychology neurology human biology irrelevant ai research bird biology aeronautical engineering intelligent behavior described simple elegant principles logic optimization necessarily require solving large number completely unrelated problems intelligence reproduced high level symbols similar words ideas require sub symbolic processing john haugeland coined term gofai good old fashioned artificial intelligence proposed ai properly referred synthetic intelligence term adopted non gofai researchers cybernetics brain simulation number researchers explored connection neurology information theory cybernetics built machines electronic networks exhibit rudimentary intelligence grey walter turtles johns hopkins beast researchers gathered meetings teleological society princeton university ratio club england approach largely abandoned elements revived symbolic access digital computers possible middle ai research began explore possibility human intelligence reduced symbol manipulation research centered institutions carnegie mellon university stanford mit developed style research john haugeland named approaches ai good old fashioned ai gofai symbolic approaches achieved great success simulating high level thinking small demonstration programs approaches based cybernetics neural networks abandoned pushed background researchers convinced symbolic approaches eventually succeed creating machine artificial general intelligence considered goal field cognitive simulation economist herbert simon allen newell studied human problem solving skills attempted formalize work laid foundations field artificial intelligence cognitive science operations research management science research team results psychological experiments develop programs simulated techniques people solve problems tradition centered carnegie mellon university eventually culminate development soar architecture middle logic based unlike newell simon john mccarthy felt machines need simulate human thought instead try essence abstract reasoning problem solving regardless people algorithms laboratory stanford sail focused formal logic solve wide variety problems including knowledge representation planning learning logic focus work university edinburgh europe led development programming language prolog science logic programming anti logic scruffy researchers mit marvin minsky seymour papert solving difficult problems vision natural language processing required ad hoc solutions argued simple general principle like logic capture aspects intelligent behavior roger schank described anti logic approaches scruffy opposed neat paradigms cmu stanford commonsense knowledge bases doug lenat cyc example scruffy ai built hand complicated concept time knowledge based computers large memories available researchers traditions began build knowledge ai applications knowledge revolution led development deployment expert systems introduced edward feigenbaum truly successful form ai software knowledge revolution driven realization enormous amounts knowledge required simple ai applications sub symbolic progress symbolic ai stall believed symbolic systems able imitate processes human cognition especially perception robotics learning pattern recognition number researchers began look sub symbolic approaches specific ai problems embodied situated behavior based nouvelle ai researchers related field robotics rodney brooks rejected symbolic ai focused basic engineering problems allow robots survive work revived non symbolic viewpoint early cybernetics researchers reintroduced use control theory ai coincided development embodied mind thesis related field cognitive science idea aspects body movement perception visualization required higher intelligence computational intelligence soft computing neural networks connectionism revived david rumelhart middle neural networks example soft computing solutions problems solved complete logical certainty approximate solution soft computing approaches ai include fuzzy systems evolutionary computation statistical tools application soft computing ai studied collectively emerging discipline computational intelligence statistical ai researchers developed sophisticated mathematical tools solve specific subproblems tools truly scientific sense results measurable verifiable responsible ai recent successes shared mathematical language permitted high level collaboration established fields like mathematics economics operations research stuart russell peter norvig movement revolution victory neats critics argue techniques exceptions focused particular problems failed address long term goal general intelligence ongoing debate relevance validity statistical approaches ai exemplified exchanges peter norvig noam chomsky integrating approaches intelligent agent paradigm intelligent agent perceives environment takes actions maximize chances success simplest intelligent agents programs solve specific problems complicated agents include human beings organizations human beings firms paradigm gives researchers license study isolated problems solutions verifiable useful agreeing single approach agent solves specific problem use approach works agents symbolic logical sub symbolic neural networks use new approaches paradigm gives researchers common language communicate fields decision theory economics use concepts abstract agents intelligent agent paradigm widely accepted agent architectures cognitive architectures researchers designed systems build intelligent systems interacting intelligent agents multi agent symbolic sub symbolic components hybrid intelligent study systems artificial intelligence systems integration hierarchical control provides bridge sub symbolic ai lowest reactive levels traditional symbolic ai highest levels relaxed time constraints permit planning world modelling rodney brooks subsumption architecture early proposal hierarchical tools course years research ai developed large number tools solve difficult problems science general methods discussed search optimization problems ai solved theory intelligently searching possible solutions reasoning reduced performing search example logical proof viewed searching path leads premises conclusions step application inference rule planning algorithms search trees goals subgoals attempting path target goal process called means ends analysis robotics algorithms moving limbs grasping objects use local searches configuration space learning algorithms use search algorithms based optimization simple exhaustive searches rarely sufficient real world problems search space number places search quickly grows astronomical numbers result search slow completes solution problems use heuristics rules thumb eliminate choices unlikely lead goal called pruning search tree heuristics supply program best guess path solution lies heuristics limit search solutions smaller sample size different kind search came prominence based mathematical theory optimization problems possible begin search form guess refine guess incrementally refinements algorithms visualized blind hill climbing begin search random point landscape jumps steps moving guess uphill reach optimization algorithms simulated annealing beam search random optimization evolutionary computation uses form optimization search example begin population organisms guesses allow mutate recombine selecting fittest survive generation refining guesses forms evolutionary computation include swarm intelligence algorithms ant colony particle swarm optimization evolutionary algorithms genetic algorithms gene expression programming genetic programming logic logic knowledge representation problem solving applied problems example satplan algorithm uses logic planning inductive logic programming method learning different forms logic ai research propositional sentential logic logic statements true false order logic allows use quantifiers predicates express facts objects properties relations fuzzy logic version order logic allows truth statement represented value simply true false fuzzy systems uncertain reasoning widely modern industrial consumer product control systems subjective logic models uncertainty different explicit manner fuzzy logic given binomial opinion satisfies belief disbelief uncertainty beta distribution method ignorance distinguished probabilistic statements agent makes high confidence default logics non monotonic logics circumscription forms logic designed help default reasoning qualification problem extensions logic designed handle specific domains knowledge description logics situation calculus event calculus fluent calculus representing events time causal calculus belief calculus modal logics probabilistic methods uncertain reasoning problems ai reasoning planning learning perception robotics require agent operate incomplete uncertain information ai researchers devised number powerful tools solve problems methods probability theory economics bayesian networks general tool large number problems reasoning bayesian inference algorithm learning expectation maximization algorithm planning decision networks perception dynamic bayesian networks probabilistic algorithms filtering prediction smoothing finding explanations streams data helping perception systems analyze processes occur time hidden markov models kalman filters key concept science economics utility measure valuable intelligent agent precise mathematical tools developed analyze agent choices plan decision theory decision analysis information value theory tools include models markov decision processes dynamic decision networks game theory mechanism design classifiers statistical learning methods simplest ai applications divided types classifiers shiny diamond controllers shiny pick controllers classify conditions inferring actions classification forms central ai systems classifiers functions use pattern matching determine closest match tuned according examples making attractive use ai examples known observations patterns supervised learning pattern belongs certain predefined class class seen decision observations combined class labels known data set new observation received observation classified based previous experience classifier trained ways statistical machine learning approaches widely classifiers neural network kernel methods support vector machine nearest neighbor algorithm gaussian mixture model naive bayes classifier decision tree performance classifiers compared wide range tasks classifier performance depends greatly characteristics data classified single classifier works best given problems referred free lunch theorem determining suitable classifier given problem art science neural networks neural network interconnected group nodes akin vast network neurons human brain study artificial neural networks began decade field ai research founded work walter pitts warren mccullough important early researchers frank rosenblatt invented perceptron paul werbos developed backpropagation algorithm main categories networks acyclic feedforward neural networks signal passes direction recurrent neural networks allow feedback popular feedforward networks perceptrons multi layer perceptrons radial basis networks recurrent networks famous hopfield net form attractor network described john hopfield neural networks applied problem intelligent control robotics learning techniques hebbian learning competitive learning hierarchical temporal memory approach models structural algorithmic properties neocortex term deep learning gained traction mid publication geoffrey hinton ruslan salakhutdinov showed layered feedforward neural network effectively pre trained layer time treating layer turn unsupervised restricted boltzmann machine supervised backpropagation fine tuning control theory control theory grandchild cybernetics important applications especially robotics languages ai researchers developed specialized languages ai research including lisp prolog evaluating progress alan turing proposed general procedure test intelligence agent known turing test procedure allows major problems artificial intelligence tested difficult challenge present agents fail artificial intelligence evaluated specific problems small problems chemistry hand writing recognition game playing tests termed subject matter expert turing tests smaller problems provide achievable goals increasing number positive results classification outcomes ai test optimal possible perform better strong super human performs better humans super human performs better humans sub human performs worse humans example performance draughts checkers optimal performance chess super human nearing strong super human chess computers versus human performance everyday tasks recognizing face crossing room bumping sub human different approach measures machine intelligence tests developed mathematical definitions intelligence examples kinds tests start late nineties devising intelligence tests notions kolmogorov complexity data compression major advantages mathematical definitions applicability nonhuman intelligences absence requirement human testers derivative turing test completely automated public turing test tell computers humans apart captcha implies helps determine user actual person posing human contrast standard turing test captcha administered machine targeted human opposed administered human targeted machine asks user complete simple test generates grade test computers unable solve problem correct solutions deemed result person taking test common type captcha test requires typing distorted letters numbers symbols appear image undecipherable applications automated online assistant providing customer service web page primitive applications artificial intelligence artificial intelligence techniques pervasive numerous list frequently technique reaches mainstream use longer considered artificial intelligence phenomenon described ai effect area artificial intelligence contributed greatly intrusion detection competitions prizes number competitions prizes promote research artificial intelligence main areas promoted general machine intelligence conversational behavior data mining robotic cars robot soccer games platforms platform computing platform defined sort hardware architecture software framework including application frameworks allows software run rodney brooks pointed years ago artificial intelligence software defines ai features platform actual platform affects ai results needs work ai problems real world platforms isolation wide variety platforms allowed different aspects ai develop ranging expert systems albeit pc based entire real world robot platforms widely available roomba open interface toys aibo robotic pet grew sony science laboratory csl famed engineer toshitada doi credited aibo original progenitor started work robots artificial intelligence expert masahiro fujita csl doi friend artist hajime sorayama enlisted create initial designs aibo body designs permanent collections museum modern art smithsonian institution later versions aibo studies carnegie mellon university aibo added carnegie mellon university robot hall fame philosophy ethics philosophical questions related ai artificial general intelligence possible machine solve problem human solve intelligence hard limits machine accomplish intelligent machines dangerous ensure machines behave ethically ethically machine mind consciousness mental states exactly sense human beings machine sentient deserve certain rights machine intentionally cause harm limits artificial general intelligence machine intelligent think turing polite convention need decide machine think need decide machine act intelligently human approach philosophical problems associated artificial intelligence forms basis turing test dartmouth proposal aspect learning feature intelligence precisely described machine simulate conjecture printed proposal dartmouth conference represents position working ai researchers newell simon physical symbol hypothesis physical symbol necessary sufficient means general intelligent action newell simon argue intelligence consists formal operations symbols hubert dreyfus argued contrary human expertise depends unconscious instinct conscious symbol manipulation having feel situation explicit symbolic knowledge dreyfus critique ai g\u00f6delian arguments g\u00f6del john lucas roger penrose detailed argument onwards argued humans reducible turing machines detailed arguments complex essence derive kurt g\u00f6del proof incompleteness theorem possible create statements formal prove human thought truth g\u00f6del statements turing program designed search statements methods reduced formal g\u00f6del statement derivable program discover humans capable understanding mathematical truth possible limited way general result accepted shown hardware neural nets computers based random processes annealing approaches quantum computers based entangled qubits long involve new physics reduced turing machines reduce complexity tasks permit new types problems solved roger penrose speculates new physics involved brain intersection gravity quantum mechanics planck scale argument accepted rule possibility true artificial intelligence means biological basis based new physical principles argument followed counter arguments roger penrose replied counter counter examples intricate complex debate details philosophy artificial intelligence lucas penrose g\u00f6del artificial brain argument brain simulated machines brains intelligent simulated brains intelligent machines intelligent hans moravec ray kurzweil argued technologically feasible copy brain directly hardware software simulation essentially identical original ai effect machines intelligent observers failed recognize deep blue beat gary kasparov chess machine acting intelligently onlookers commonly discount behavior artificial intelligence program arguing real intelligence real intelligence intelligent behavior people machines known ai effect ai hasn intelligent behaviour machine ethics minimum ai able reproduce aspects human intelligence raises issue ethically machine behave humans ai agents issue addressed wendell wallach book titled moral machines introduced concept artificial moral agents ama wallach amas research landscape artificial intelligence guided central questions identifies humanity want computers making moral decisions ro bots moral wallach question centered issue machines demonstrate equivalent moral behavior contrast constraints society place development amas machine ethics field machine ethics concerned giving machines ethical principles procedure discovering way resolve ethical dilemmas encounter enabling function ethically responsible manner ethical decision making field delineated aaai fall symposium machine ethics past research concerning relationship technology ethics largely focused responsible irresponsible use technology human beings people interested human beings ought treat machines cases human beings engaged ethical reasoning time come adding ethical dimension machines recognition ethical ramifications behavior involving machines recent potential developments machine autonomy necessitate contrast hacking software property issues privacy issues topics normally ascribed ethics machine ethics concerned behavior machines human users machines research machine ethics key alleviating concerns autonomous systems argued notion autonomous machines dimension root fear concerning machine intelligence investigation machine ethics enable discovery problems current ethical theories advancing thinking ethics machine ethics referred machine morality computational ethics computational morality variety perspectives nascent field collected edition machine ethics stems aaai fall symposium machine ethics malevolent friendly ai political scientist charles rubin believes ai designed guaranteed benevolent argues sufficiently advanced benevolence malevolence humans assume machines robots treat favorably priori reason believe sympathetic morality evolved particular biology ais share hyper intelligent software necessarily decide support continued existence mankind extremely difficult stop topic recently begun discussed academic publications real source risks civilization humans planet earth physicist stephen hawking microsoft founder gates spacex founder elon musk expressed concerns possibility ai evolve point humans control hawking theorizing spell end human race proposal deal ensure generally intelligent ai friendly ai able control subsequently developed ais question kind check remain place leading ai researcher rodney brooks writes think mistake worrying developing malevolent ai anytime years think worry stems fundamental error distinguishing difference real recent advances particular aspect ai enormity complexity building sentient volitional intelligence devaluation humanity joseph weizenbaum wrote ai applications definition successfully simulate genuine human empathy use ai technology fields customer service psychotherapy deeply misguided weizenbaum bothered ai researchers philosophers willing view human mind program position known weizenbaum points suggest ai research devalues human life decrease demand human labor martin ford author lights tunnel automation accelerating technology economy future argue specialized artificial intelligence applications robotics forms automation ultimately result significant unemployment machines begin match exceed capability workers perform routine repetitive jobs ford predicts knowledge based occupations particular entry level jobs increasingly susceptible automation expert systems machine learning ai enhanced applications ai based applications amplify capabilities low wage offshore workers making feasible outsource knowledge work machine consciousness sentience mind ai replicates key aspects human intelligence sentient mind conscious experiences question closely related philosophical problem nature human consciousness generally referred hard problem consciousness consciousness objective criteria knowing intelligent agent sentient conscious experiences assume people tell subjective determination lack hard criteria known hard problem theory consciousness problem applies people higher animals extension ai agents human intelligence consciousness mind products information processing brain essentially idea human mind human brain information processing thinking form computing ai implementing machines human intelligence founded claim central property humans intelligence precisely described machine simulate program derived human implemented artificial create efficient artificial intelligence program act set outputs result set inputs internal memory machine act implemented start long term goal ai researchers provide machines deep understanding abilities human replicate general intelligence strong ai defined machine surpassing human abilities perform skills implanted scary thought fear losing control powerful machine obstacles researchers mainly time contstraints ai scientists establish database commonsense knowledge ontologically crafted machine takes tremendous time combat ai research looks machine able understand concepts order add ontology machine ethics primarily concerned behavior machines humans machines limiting extent developing ai order function like common human ai display ability solve subsymbolic commonsense knowledge tasks artists tell statues fake chess masters certain spots avoid exposure developing machines ai research faced difficulty potentially putting lot people work economy things businesses boom efficiency forcing ai bottleneck trying developing self improving machines strong ai hypothesis searle strong ai hypothesis states appropriately programmed right inputs outputs mind exactly sense human beings minds john searle counters assertion chinese room argument asks look inside try mind robot rights mary shelley frankenstein considers key issue ethics artificial intelligence machine created intelligence feel feel rights human idea appears modern science fiction film artificial intelligence humanoid machines ability feel emotions issue known robot rights currently considered example california institute future critics believe discussion premature subject profoundly discussed documentary film plug pray limits intelligent machines human machine hybrids superhuman intelligence hypothetical agent possess intelligence far surpassing brightest gifted human mind refer form degree intelligence possessed agent technological singularity research strong ai produced sufficiently intelligent software able reprogram improve improved software better improving leading recursive self improvement new intelligence increase exponentially dramatically surpass humans science fiction writer vernor vinge named scenario singularity technological singularity accelerating progress technologies cause runaway effect artificial intelligence exceed human intellectual capacity control radically changing ending civilization capabilities intelligence impossible comprehend technological singularity occurrence events unpredictable unfathomable ray kurzweil moore law describes relentless exponential improvement digital technology calculate desktop computers processing power human brains year predicts singularity occur transhumanism robot designer hans moravec cyberneticist kevin warwick inventor ray kurzweil predicted humans machines merge future cyborgs capable powerful idea called transhumanism roots aldous huxley robert ettinger illustrated fiction example manga ghost shell science fiction series dune artist hajime sorayama sexy robots series painted published japan depicting actual organic human form lifelike muscular metallic skins later gynoids book followed influenced movie makers including george lucas creatives sorayama considered organic robots real nature unnatural product human mind fantasy existing mind realized actual form edward fredkin argues artificial intelligence stage evolution idea proposed samuel butler darwin machines expanded george dyson book fiction implications artificial intelligence persistent theme science fiction early stories typically revolved intelligent robots word robot coined karel \u010dapek play title standing rossum universal robots later sf writer isaac asimov developed laws robotics subsequently explored long series robot stories laws gained traction genuine ai research influential fictional intelligences include hal charge spaceship space odyssey released film book written arthur clarke ai firmly rooted popular culture ai takeover artificial intelligence journal artificial intelligence video games artificial stupidity nick bostrom effective altruism existential risk existential risk artificial general intelligence future humanity institute human cognome project list artificial intelligence projects list artificial intelligence researchers list emerging technologies list important artificial intelligence publications list machine learning algorithms list scientific journals machine ethics machine learning ending language learning final invention outline artificial intelligence outline human intelligence philosophy mind simulated reality symbolic artificial intelligence notes references ai textbooks history ai sources bibtex cited presidential address association advancement artificial intelligence later published reading techcast article series john sagi framing consciousness boden margaret mind machine oxford university press johnston john allure machinic life cybernetics artificial life new ai mit press myers courtney boyd ed ai report forbes june sun bookman eds computational architectures integrating neural symbolic processes kluwer academic publishers needham ma external links ai introduction artificial intelligence ai founder john mccarthy handbook artificial intelligence volume avron barr edward feigenbaum stanford university aitopics large directory links resources maintained association advancement artificial intelligence leading organization academic ai researchers", "Machine learning and pattern recognition": "pattern recognition branch machine learning focuses recognition patterns regularities data cases considered nearly synonymous machine learning pattern recognition systems cases trained labeled training data supervised learning labeled data available algorithms discover previously unknown patterns unsupervised learning terms pattern recognition machine learning data mining knowledge discovery databases kdd hard separate largely overlap scope machine learning common term supervised learning methods originates artificial intelligence kdd data mining larger focus unsupervised methods stronger connection business use pattern recognition origins engineering term popular context vision leading vision conference named conference vision pattern recognition pattern recognition higher formalize explain visualize pattern machine learning traditionally focuses maximizing recognition rates domains evolved substantially roots artificial intelligence engineering statistics ve increasingly similar integrating developments ideas machine learning pattern recognition assignment label given input value statistics discriminant analysis introduced purpose example pattern recognition classification attempts assign input value given set classes example determine given email spam non spam pattern recognition general problem encompasses types output examples regression assigns real valued output input sequence labeling assigns class member sequence values example speech tagging assigns speech word input sentence parsing assigns parse tree input sentence describing syntactic structure sentence pattern recognition algorithms generally aim provide reasonable answer possible inputs perform likely matching inputs taking account statistical variation opposed pattern matching algorithms look exact matches input pre existing patterns common example pattern matching algorithm regular expression matching looks patterns given sort textual data included search capabilities text editors word processors contrast pattern recognition pattern matching generally considered type machine learning pattern matching algorithms especially fairly general carefully tailored patterns succeed providing similar quality output sort provided pattern recognition algorithms overview pattern recognition generally categorized according type learning procedure generate output value supervised learning assumes set training data training set provided consisting set instances properly labeled hand correct output learning procedure generates model attempts meet conflicting objectives perform possible training data generalize possible new data usually means simple possible technical definition simple accordance occam razor discussed unsupervised learning hand assumes training data hand labeled attempts inherent patterns data determine correct output value new data instances combination recently explored semi supervised learning uses combination labeled unlabeled data typically small set labeled data combined large unlabeled data note cases unsupervised learning training data speak words data labeled training data note different terms corresponding supervised unsupervised learning procedures type output example unsupervised equivalent classification normally known clustering based common perception task involving training data speak grouping input data clusters based inherent similarity measure distance instances considered vectors multi dimensional vector space assigning input instance set pre defined classes note fields terminology different example community ecology term classification refer commonly known clustering piece input data output value generated formally termed instance instance formally described vector features constitute description known characteristics instance feature vectors seen defining points appropriate space methods manipulating vectors vector spaces correspondingly applied computing dot product angle vectors typically features categorical known nominal consisting set unordered items gender male female blood type ab ordinal consisting set ordered items large medium small integer valued count number occurrences particular word email real valued measurement blood pressure categorical ordinal data grouped likewise integer valued real valued data furthermore algorithms work terms categorical data require real valued integer valued data discretized groups greater probabilistic classifiers common pattern recognition algorithms probabilistic nature use statistical inference best label given instance unlike algorithms simply output best label probabilistic algorithms output probability instance described given label addition probabilistic algorithms output list best labels associated probabilities value instead simply single best label number possible labels fairly small case classification set probability possible labels output probabilistic algorithms advantages non probabilistic algorithms output confidence value associated choice note algorithms output confidence values general probabilistic algorithms value mathematically grounded probability theory non probabilistic confidence values general given specific meaning compare confidence values output algorithm correspondingly abstain confidence choosing particular output low probabilities output probabilistic pattern recognition algorithms effectively incorporated larger machine learning tasks way partially completely avoids problem error propagation feature variables important feature selection algorithms attempt directly prune redundant irrelevant features general introduction feature selection summarizes approaches challenges given complexity feature selection non monotonous character optimization problem given total features powerset consisting subsets features need explored branch bound algorithm reduce complexity intractable medium large values number available features large scale comparison feature selection algorithms techniques transform raw feature vectors feature extraction prior application pattern matching algorithm example feature extraction algorithms attempt reduce large dimensionality feature vector smaller dimensionality vector easier work encodes redundancy mathematical techniques principal components analysis pca distinction feature selection feature extraction resulting features feature extraction taken place different sort original features easily interpretable features left feature selection simply subset original features problem statement supervised version formally problem supervised pattern recognition stated follows given unknown function ground truth maps input instances output labels training data assumed represent accurate examples mapping produce function approximates closely possible correct mapping example problem filtering spam representation email spam non spam order defined problem approximates closely possible needs defined rigorously decision theory defined specifying loss function assigns specific value loss resulting producing incorrect label goal minimize expected loss expectation taken probability distribution practice distribution ground truth function known exactly computed empirically collecting large number samples hand labeling correct value time consuming process typically limiting factor data sort collected particular loss function depends type label predicted example case classification simple zero loss function sufficient corresponds simply assigning loss incorrect labeling implies optimal classifier minimizes error rate independent test data counting fraction instances learned function labels wrongly equivalent maximizing number correctly classified instances goal learning procedure minimize error rate maximize correctness typical test set probabilistic pattern recognizer problem instead estimate probability possible output label given particular input instance estimate function form feature vector input function typically parameterized parameters discriminative approach problem estimated directly generative approach inverse probability instead estimated combined prior probability bayes rule follows labels continuously distributed regression analysis denominator involves integration summation value typically learned maximum posteriori map estimation finds best value simultaneously meets conflicting objects perform possible training data smallest error rate simplest possible model essentially combines maximum likelihood estimation regularization procedure favors simpler models complex models bayesian context regularization procedure viewed placing prior probability different values mathematically value subsequent evaluation procedure posterior probability given bayesian approach problem instead choosing single parameter vector probability given label new instance computed integrating possible values weighted according posterior probability frequentist bayesian approach pattern recognition pattern classifier linear discriminant presented fisher developed frequentist tradition frequentist approach entails model parameters considered unknown objective parameters computed estimated collected data linear discriminant parameters precisely mean vectors covariance matrix probability class estimated collected dataset note usage bayes rule pattern classifier classification approach bayesian bayesian statistics origin greek philosophy distinction priori posteriori knowledge later kant defined distinction priori known observation empirical knowledge gained observations bayesian pattern classifier class probabilities chosen user priori experience quantified priori parameter values weighted empirical observations beta conjugate prior dirichlet distributions bayesian approach facilitates seamless intermixing expert knowledge form subjective probabilities objective observations probabilistic pattern classifiers according frequentist bayesian approach uses face automatically detected special software medical science pattern recognition basis aided diagnosis cad systems cad describes procedure supports doctor interpretations findings pattern shape recognition technology srt people counter typical applications pattern recognition techniques automatic speech recognition classification text categories spam non spam email messages automatic recognition handwritten postal codes postal envelopes automatic recognition images human faces handwriting image extraction medical forms examples form subtopic image analysis pattern recognition deals digital images input pattern recognition systems optical character recognition classic example application pattern classifier ocr example method signing captured stylus overlay starting strokes speed relative min relative max acceleration pressure uniquely identify confirm identity banks offered technology content collect fdic bank fraud want inconvenience customers artificial neural networks neural net classifiers deep learning real world applications image processing examples identification authentication license plate recognition fingerprint analysis face detection verification medical diagnosis screening cervical cancer papnet breast tumors defence navigation guidance systems target recognition systems shape recognition technology discussion aforementioned applications neural networks image processing psychology pattern recognition making sense identifying objects closely related perception explains sensory inputs receive meaningful pattern recognition thought different ways template matching second feature detection template pattern produce items proportions template matching hypothesis suggests incoming stimuli compared templates long term memory match stimulus identified feature detection models pandemonium classifying letters selfridge suggest stimuli broken component parts identification example capital horizontal lines vertical line algorithms algorithms pattern recognition depend type label output learning supervised unsupervised algorithm statistical non statistical nature statistical algorithms categorized generative discriminative classification algorithms supervised algorithms predicting categorical labels parametric linear discriminant analysis quadratic discriminant analysis maximum entropy classifier aka logistic regression multinomial logistic regression note logistic regression algorithm classification despite comes fact logistic regression uses extension linear regression model model probability input particular class nonparametric decision trees decision lists kernel estimation nearest neighbor algorithms naive bayes classifier neural networks multi layer perceptrons perceptrons support vector machines gene expression programming clustering algorithms unsupervised algorithms predicting categorical labels categorical mixture models deep learning methods hierarchical clustering agglomerative divisive means clustering correlation clustering kernel principal component analysis kernel pca ensemble learning algorithms supervised meta algorithms combining multiple learning algorithms boosting meta algorithm bootstrap aggregating bagging ensemble averaging mixture experts hierarchical mixture experts general algorithms predicting arbitrarily structured sets labels bayesian networks markov random fields multilinear subspace learning algorithms predicting labels data tensor representations unsupervised multilinear principal component analysis mpca real valued sequence labeling algorithms predicting sequences real valued labels supervised kalman filters particle filters regression algorithms predicting real valued labels supervised gaussian process regression kriging linear regression extensions neural networks deep learning methods unsupervised independent component analysis ica principal components analysis pca sequence labeling algorithms predicting sequences categorical labels supervised conditional random fields crfs hidden markov models hmms maximum entropy markov models memms recurrent neural networks unsupervised hidden markov models hmms adaptive resonance theory cache language model compound term processing aided diagnosis data mining deep learning list numerical analysis software list numerical libraries machine learning multilinear subspace learning neocognitron perception perceptual learning predictive analytics prior knowledge pattern recognition sequence mining template matching contextual image classification references reading introductory tutorial classifiers introducing basic terms numeric example external links international association pattern recognition list pattern recognition web sites journal pattern recognition research pattern recognition info pattern recognition journal pattern recognition society international journal pattern recognition artificial intelligence international journal applied pattern recognition open pattern recognition project intended open source platform sharing algorithms pattern recognition"}